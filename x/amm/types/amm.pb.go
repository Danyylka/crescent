// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crescent/amm/v1beta1/amm.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	PoolCreationFee               github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=pool_creation_fee,json=poolCreationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"pool_creation_fee"`
	SharedPositionCreationFee     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=shared_position_creation_fee,json=sharedPositionCreationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"shared_position_creation_fee"`
	DefaultTickSpacing            uint32                                   `protobuf:"varint,3,opt,name=default_tick_spacing,json=defaultTickSpacing,proto3" json:"default_tick_spacing,omitempty"`
	PrivateFarmingPlanCreationFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=private_farming_plan_creation_fee,json=privateFarmingPlanCreationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"private_farming_plan_creation_fee"`
	MaxNumPrivateFarmingPlans     uint32                                   `protobuf:"varint,5,opt,name=max_num_private_farming_plans,json=maxNumPrivateFarmingPlans,proto3" json:"max_num_private_farming_plans,omitempty"`
	MaxRewardsBlockTime           time.Duration                            `protobuf:"bytes,6,opt,name=max_rewards_block_time,json=maxRewardsBlockTime,proto3,stdduration" json:"max_rewards_block_time"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dfef6a2c44f2449, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

type Pool struct {
	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MarketId       uint64 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Denom0         string `protobuf:"bytes,3,opt,name=denom0,proto3" json:"denom0,omitempty"`
	Denom1         string `protobuf:"bytes,4,opt,name=denom1,proto3" json:"denom1,omitempty"`
	TickSpacing    uint32 `protobuf:"varint,5,opt,name=tick_spacing,json=tickSpacing,proto3" json:"tick_spacing,omitempty"`
	ReserveAddress string `protobuf:"bytes,6,opt,name=reserve_address,json=reserveAddress,proto3" json:"reserve_address,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dfef6a2c44f2449, []int{1}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

type PoolState struct {
	CurrentTick                int32                                       `protobuf:"varint,1,opt,name=current_tick,json=currentTick,proto3" json:"current_tick,omitempty"`
	CurrentPrice               github_com_cosmos_cosmos_sdk_types.Dec      `protobuf:"bytes,2,opt,name=current_price,json=currentPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"current_price"`
	CurrentLiquidity           github_com_cosmos_cosmos_sdk_types.Int      `protobuf:"bytes,3,opt,name=current_liquidity,json=currentLiquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"current_liquidity"`
	FeeGrowthGlobal0           github_com_cosmos_cosmos_sdk_types.Dec      `protobuf:"bytes,4,opt,name=fee_growth_global0,json=feeGrowthGlobal0,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_growth_global0"`
	FeeGrowthGlobal1           github_com_cosmos_cosmos_sdk_types.Dec      `protobuf:"bytes,5,opt,name=fee_growth_global1,json=feeGrowthGlobal1,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_growth_global1"`
	FarmingRewardsGrowthGlobal github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,6,rep,name=farming_rewards_growth_global,json=farmingRewardsGrowthGlobal,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"farming_rewards_growth_global"`
}

func (m *PoolState) Reset()         { *m = PoolState{} }
func (m *PoolState) String() string { return proto.CompactTextString(m) }
func (*PoolState) ProtoMessage()    {}
func (*PoolState) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dfef6a2c44f2449, []int{2}
}
func (m *PoolState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolState.Merge(m, src)
}
func (m *PoolState) XXX_Size() int {
	return m.Size()
}
func (m *PoolState) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolState.DiscardUnknown(m)
}

var xxx_messageInfo_PoolState proto.InternalMessageInfo

type Position struct {
	Id                             uint64                                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PoolId                         uint64                                      `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Owner                          string                                      `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	LowerTick                      int32                                       `protobuf:"varint,4,opt,name=lower_tick,json=lowerTick,proto3" json:"lower_tick,omitempty"`
	UpperTick                      int32                                       `protobuf:"varint,5,opt,name=upper_tick,json=upperTick,proto3" json:"upper_tick,omitempty"`
	Liquidity                      github_com_cosmos_cosmos_sdk_types.Int      `protobuf:"bytes,6,opt,name=liquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"liquidity"`
	LastFeeGrowthInside0           github_com_cosmos_cosmos_sdk_types.Dec      `protobuf:"bytes,7,opt,name=last_fee_growth_inside0,json=lastFeeGrowthInside0,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"last_fee_growth_inside0"`
	LastFeeGrowthInside1           github_com_cosmos_cosmos_sdk_types.Dec      `protobuf:"bytes,8,opt,name=last_fee_growth_inside1,json=lastFeeGrowthInside1,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"last_fee_growth_inside1"`
	OwedToken0                     github_com_cosmos_cosmos_sdk_types.Int      `protobuf:"bytes,9,opt,name=owed_token0,json=owedToken0,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"owed_token0"`
	OwedToken1                     github_com_cosmos_cosmos_sdk_types.Int      `protobuf:"bytes,10,opt,name=owed_token1,json=owedToken1,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"owed_token1"`
	LastFarmingRewardsGrowthInside github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,11,rep,name=last_farming_rewards_growth_inside,json=lastFarmingRewardsGrowthInside,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"last_farming_rewards_growth_inside"`
	OwedFarmingRewards             github_com_cosmos_cosmos_sdk_types.Coins    `protobuf:"bytes,12,rep,name=owed_farming_rewards,json=owedFarmingRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"owed_farming_rewards"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dfef6a2c44f2449, []int{3}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

type TickInfo struct {
	GrossLiquidity              github_com_cosmos_cosmos_sdk_types.Int      `protobuf:"bytes,1,opt,name=gross_liquidity,json=grossLiquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"gross_liquidity"`
	NetLiquidity                github_com_cosmos_cosmos_sdk_types.Int      `protobuf:"bytes,2,opt,name=net_liquidity,json=netLiquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"net_liquidity"`
	FeeGrowthOutside0           github_com_cosmos_cosmos_sdk_types.Dec      `protobuf:"bytes,3,opt,name=fee_growth_outside0,json=feeGrowthOutside0,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_growth_outside0"`
	FeeGrowthOutside1           github_com_cosmos_cosmos_sdk_types.Dec      `protobuf:"bytes,4,opt,name=fee_growth_outside1,json=feeGrowthOutside1,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_growth_outside1"`
	FarmingRewardsGrowthOutside github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,5,rep,name=farming_rewards_growth_outside,json=farmingRewardsGrowthOutside,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"farming_rewards_growth_outside"`
}

func (m *TickInfo) Reset()         { *m = TickInfo{} }
func (m *TickInfo) String() string { return proto.CompactTextString(m) }
func (*TickInfo) ProtoMessage()    {}
func (*TickInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dfef6a2c44f2449, []int{4}
}
func (m *TickInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TickInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TickInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TickInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickInfo.Merge(m, src)
}
func (m *TickInfo) XXX_Size() int {
	return m.Size()
}
func (m *TickInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TickInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TickInfo proto.InternalMessageInfo

type SharedPosition struct {
	PositionId uint64 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	ShareDenom string `protobuf:"bytes,2,opt,name=share_denom,json=shareDenom,proto3" json:"share_denom,omitempty"`
}

func (m *SharedPosition) Reset()         { *m = SharedPosition{} }
func (m *SharedPosition) String() string { return proto.CompactTextString(m) }
func (*SharedPosition) ProtoMessage()    {}
func (*SharedPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dfef6a2c44f2449, []int{5}
}
func (m *SharedPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SharedPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SharedPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SharedPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SharedPosition.Merge(m, src)
}
func (m *SharedPosition) XXX_Size() int {
	return m.Size()
}
func (m *SharedPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_SharedPosition.DiscardUnknown(m)
}

var xxx_messageInfo_SharedPosition proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "crescent.amm.v1beta1.Params")
	proto.RegisterType((*Pool)(nil), "crescent.amm.v1beta1.Pool")
	proto.RegisterType((*PoolState)(nil), "crescent.amm.v1beta1.PoolState")
	proto.RegisterType((*Position)(nil), "crescent.amm.v1beta1.Position")
	proto.RegisterType((*TickInfo)(nil), "crescent.amm.v1beta1.TickInfo")
	proto.RegisterType((*SharedPosition)(nil), "crescent.amm.v1beta1.SharedPosition")
}

func init() { proto.RegisterFile("crescent/amm/v1beta1/amm.proto", fileDescriptor_1dfef6a2c44f2449) }

var fileDescriptor_1dfef6a2c44f2449 = []byte{
	// 1053 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4f, 0x6f, 0x1b, 0xc5,
	0x1b, 0xce, 0xa6, 0x8e, 0x1b, 0xbf, 0xce, 0x9f, 0x66, 0x6a, 0xb5, 0x9b, 0xb4, 0x59, 0xa7, 0x3e,
	0xfc, 0x7e, 0x91, 0x50, 0x6d, 0x2f, 0x11, 0x77, 0x48, 0xa3, 0x54, 0x96, 0x2a, 0x6a, 0x36, 0x91,
	0x40, 0x80, 0x58, 0x8d, 0x77, 0xc7, 0xce, 0xca, 0xbb, 0x3b, 0xcb, 0xcc, 0x38, 0x4e, 0x0f, 0x7c,
	0x03, 0x0e, 0x20, 0x01, 0xe2, 0xc2, 0x17, 0xe0, 0xc2, 0x81, 0x2f, 0x91, 0x63, 0x8f, 0x88, 0x43,
	0x0b, 0x09, 0x9f, 0x81, 0x33, 0x9a, 0x3f, 0xeb, 0xd8, 0x89, 0x2b, 0xb5, 0x6e, 0x7a, 0xca, 0xce,
	0x3b, 0x93, 0xe7, 0x79, 0xde, 0xf7, 0x7d, 0xe6, 0xcd, 0x04, 0x9c, 0x80, 0x11, 0x1e, 0x90, 0x54,
	0x34, 0x70, 0x92, 0x34, 0x8e, 0xdd, 0x0e, 0x11, 0xd8, 0x95, 0xdf, 0xf5, 0x8c, 0x51, 0x41, 0x51,
	0x25, 0xdf, 0xaf, 0xcb, 0x98, 0xd9, 0xdf, 0xa8, 0xf4, 0x68, 0x8f, 0xaa, 0x03, 0x0d, 0xf9, 0xa5,
	0xcf, 0x6e, 0x38, 0x01, 0xe5, 0x09, 0xe5, 0x8d, 0x0e, 0xe6, 0x64, 0x04, 0x15, 0xd0, 0x28, 0x35,
	0xfb, 0xd5, 0x1e, 0xa5, 0xbd, 0x98, 0x34, 0xd4, 0xaa, 0x33, 0xe8, 0x36, 0x44, 0x94, 0x10, 0x2e,
	0x70, 0x92, 0xe5, 0x00, 0x97, 0x0f, 0x84, 0x03, 0x86, 0x45, 0x44, 0x0d, 0x40, 0xed, 0xdf, 0x02,
	0x14, 0xdb, 0x98, 0xe1, 0x84, 0xa3, 0x21, 0xac, 0x65, 0x94, 0xc6, 0x7e, 0xc0, 0x88, 0x3a, 0xe1,
	0x77, 0x09, 0xb1, 0xad, 0xad, 0x1b, 0xdb, 0xe5, 0xf7, 0xd7, 0xeb, 0x5a, 0x47, 0x5d, 0xea, 0xc8,
	0x25, 0xd7, 0x1f, 0xd1, 0x28, 0xdd, 0x6d, 0x9e, 0xbe, 0xa8, 0xce, 0xfd, 0xfa, 0xb2, 0xba, 0xdd,
	0x8b, 0xc4, 0xd1, 0xa0, 0x53, 0x0f, 0x68, 0xd2, 0x30, 0xa2, 0xf5, 0x8f, 0x87, 0x3c, 0xec, 0x37,
	0xc4, 0xb3, 0x8c, 0x70, 0xf5, 0x0b, 0xdc, 0x5b, 0x95, 0x2c, 0x8f, 0x0c, 0xc9, 0x3e, 0x21, 0xe8,
	0x5b, 0x0b, 0xee, 0xf3, 0x23, 0xcc, 0x48, 0xe8, 0x67, 0x94, 0x47, 0x8a, 0x7b, 0x42, 0xc4, 0xfc,
	0xf5, 0x8b, 0x58, 0xd7, 0x84, 0x6d, 0xc3, 0x37, 0x2e, 0xa7, 0x09, 0x95, 0x90, 0x74, 0xf1, 0x20,
	0x16, 0xbe, 0x88, 0x82, 0xbe, 0xcf, 0x33, 0x1c, 0x44, 0x69, 0xcf, 0xbe, 0xb1, 0x65, 0x6d, 0x2f,
	0x7b, 0xc8, 0xec, 0x1d, 0x46, 0x41, 0xff, 0x40, 0xef, 0xa0, 0x1f, 0x2d, 0x78, 0x90, 0xb1, 0xe8,
	0x18, 0x0b, 0xe2, 0x77, 0x31, 0x4b, 0xa2, 0xb4, 0xe7, 0x67, 0x31, 0xbe, 0x94, 0x45, 0xe1, 0xfa,
	0xb3, 0xd8, 0x34, 0xac, 0xfb, 0x9a, 0xb4, 0x1d, 0xe3, 0x89, 0x4c, 0x3e, 0x84, 0xcd, 0x04, 0x9f,
	0xf8, 0xe9, 0x20, 0xf1, 0xa7, 0xc9, 0xe3, 0xf6, 0x82, 0x4a, 0x69, 0x3d, 0xc1, 0x27, 0x1f, 0x0f,
	0x92, 0xf6, 0x15, 0x2c, 0x8e, 0x3e, 0x83, 0x3b, 0x12, 0x81, 0x91, 0x21, 0x66, 0x21, 0xf7, 0x3b,
	0x31, 0x0d, 0xfa, 0xbe, 0xf4, 0x98, 0x5d, 0xdc, 0xb2, 0x54, 0x36, 0xda, 0x5f, 0xf5, 0xdc, 0x5f,
	0xf5, 0x3d, 0xe3, 0xaf, 0xdd, 0x45, 0x99, 0xcd, 0xcf, 0x2f, 0xab, 0x96, 0x77, 0x3b, 0xc1, 0x27,
	0x9e, 0x46, 0xd8, 0x95, 0x00, 0x87, 0x51, 0x42, 0x6a, 0xbf, 0x59, 0x50, 0x68, 0x53, 0x1a, 0xa3,
	0x15, 0x98, 0x8f, 0x42, 0xdb, 0xda, 0xb2, 0xb6, 0x0b, 0xde, 0x7c, 0x14, 0xa2, 0x7b, 0x50, 0x4a,
	0x30, 0xeb, 0x13, 0xe1, 0x47, 0xa1, 0x3d, 0xaf, 0xc2, 0x8b, 0x3a, 0xd0, 0x0a, 0xd1, 0x1d, 0x28,
	0x86, 0x24, 0xa5, 0x49, 0x53, 0x75, 0xa3, 0xe4, 0x99, 0xd5, 0x28, 0xee, 0xda, 0x85, 0xb1, 0xb8,
	0x8b, 0x1e, 0xc0, 0xd2, 0x44, 0x0f, 0x75, 0xc2, 0x65, 0x31, 0xd6, 0xbc, 0xff, 0xc3, 0x2a, 0x23,
	0x9c, 0xb0, 0x63, 0xe2, 0xe3, 0x30, 0x64, 0x84, 0x73, 0x95, 0x5b, 0xc9, 0x5b, 0x31, 0xe1, 0x8f,
	0x74, 0xb4, 0xf6, 0x7b, 0x01, 0x4a, 0x52, 0xf1, 0x81, 0xc0, 0x82, 0x48, 0xe4, 0x60, 0xc0, 0x18,
	0x49, 0xb5, 0x4b, 0x54, 0x02, 0x0b, 0x5e, 0xd9, 0xc4, 0xa4, 0x3b, 0xd0, 0x01, 0x2c, 0xe7, 0x47,
	0x32, 0x16, 0x05, 0x44, 0x65, 0x53, 0xda, 0xad, 0xcb, 0xc2, 0xfc, 0xf9, 0xa2, 0xfa, 0xbf, 0xd7,
	0x68, 0xf3, 0x1e, 0x09, 0xbc, 0x9c, 0xa7, 0x2d, 0x31, 0xd0, 0x17, 0xb0, 0x96, 0x83, 0xc6, 0xd1,
	0xd7, 0x83, 0x28, 0x8c, 0xc4, 0x33, 0x5d, 0x8c, 0x37, 0x02, 0x6e, 0xa5, 0xc2, 0xbb, 0x65, 0x80,
	0x9e, 0xe4, 0x38, 0xe8, 0x4b, 0x40, 0x5d, 0x42, 0xfc, 0x1e, 0xa3, 0x43, 0x71, 0xe4, 0xf7, 0x62,
	0xda, 0xc1, 0x71, 0x53, 0x97, 0xf4, 0x8d, 0x65, 0xdf, 0xea, 0x12, 0xf2, 0x58, 0x01, 0x3d, 0xd6,
	0x38, 0x53, 0xd1, 0x5d, 0xd5, 0x92, 0xb7, 0x47, 0x77, 0xd1, 0x0f, 0x16, 0x6c, 0xe6, 0xee, 0xce,
	0xfd, 0x3a, 0x41, 0x65, 0x17, 0xd5, 0x05, 0xbc, 0x3f, 0xf5, 0x02, 0xee, 0x91, 0x40, 0xdd, 0xc1,
	0x1d, 0x73, 0x07, 0xdf, 0x7b, 0x3d, 0x1d, 0xfa, 0x1a, 0x6e, 0x18, 0x5e, 0x63, 0xf2, 0x71, 0x5d,
	0xb5, 0x7f, 0x8a, 0xb0, 0x98, 0x4f, 0x99, 0x2b, 0x5e, 0xbf, 0x0b, 0x37, 0xd5, 0xc8, 0x1d, 0x39,
	0xbd, 0x28, 0x97, 0xad, 0x10, 0x55, 0x60, 0x81, 0x0e, 0x53, 0xc2, 0x8c, 0xcd, 0xf5, 0x02, 0x6d,
	0x02, 0xc4, 0x74, 0x48, 0x98, 0x76, 0x5c, 0x41, 0x39, 0xae, 0xa4, 0x22, 0xca, 0x6f, 0x9b, 0x00,
	0x83, 0x2c, 0xcb, 0xb7, 0x17, 0xf4, 0xb6, 0x8a, 0xa8, 0xed, 0x27, 0x50, 0xba, 0x70, 0x4c, 0x71,
	0x26, 0xc7, 0x5c, 0x00, 0x20, 0x02, 0x77, 0x63, 0xcc, 0x85, 0x3f, 0xd6, 0xd1, 0x28, 0xe5, 0x51,
	0x48, 0x9a, 0xf6, 0xcd, 0x99, 0x3a, 0x5a, 0x91, 0x70, 0xfb, 0x79, 0x57, 0x5b, 0x1a, 0xeb, 0xd5,
	0x34, 0xae, 0xbd, 0x78, 0x6d, 0x34, 0x2e, 0x7a, 0x0a, 0x65, 0x3a, 0x24, 0xa1, 0x2f, 0x68, 0x9f,
	0xa4, 0x4d, 0xbb, 0x34, 0x53, 0x75, 0x40, 0x42, 0x1c, 0x2a, 0x84, 0x49, 0x40, 0xd7, 0x86, 0xb7,
	0x04, 0x74, 0xd1, 0x2f, 0x16, 0xd4, 0x74, 0x25, 0xa6, 0x7b, 0x5c, 0x57, 0xc5, 0x2e, 0xbf, 0x2b,
	0x8f, 0x3b, 0xaa, 0x6e, 0x53, 0x7c, 0xae, 0x4b, 0x88, 0xbe, 0x81, 0x8a, 0x4a, 0xf8, 0x92, 0x3c,
	0x7b, 0xe9, 0xfa, 0xff, 0xea, 0x21, 0x49, 0x34, 0x29, 0xa5, 0xf6, 0x7d, 0x01, 0x16, 0xa5, 0xcb,
	0x5b, 0x69, 0x97, 0xa2, 0x4f, 0x61, 0xb5, 0xc7, 0x28, 0xe7, 0x63, 0x13, 0xd2, 0x9a, 0xa9, 0x01,
	0x2b, 0x0a, 0xe6, 0x62, 0x3e, 0x1e, 0xc0, 0x72, 0x4a, 0xc6, 0x07, 0xef, 0xfc, 0x4c, 0xb0, 0x4b,
	0x29, 0x19, 0x1b, 0xba, 0x5f, 0xc1, 0xed, 0x31, 0x77, 0xd3, 0x81, 0xd0, 0xb7, 0xe8, 0xc6, 0x4c,
	0xf6, 0x5e, 0x1b, 0xcd, 0xc5, 0xa7, 0x06, 0x68, 0x3a, 0xbe, 0x3b, 0xe3, 0x54, 0xbf, 0x82, 0xef,
	0xa2, 0x9f, 0x2c, 0x70, 0x5e, 0x61, 0x4a, 0x43, 0x66, 0x2f, 0xbc, 0x2b, 0x57, 0xde, 0x9b, 0x36,
	0x79, 0x8d, 0xb2, 0x9a, 0x07, 0x2b, 0x07, 0x13, 0xaf, 0x3c, 0x54, 0x85, 0xf2, 0xe8, 0x85, 0x39,
	0x1a, 0xc4, 0x90, 0x87, 0x5a, 0xa1, 0x3c, 0xa0, 0x1e, 0x86, 0xbe, 0x7a, 0x3f, 0xe8, 0xf6, 0x7a,
	0xa0, 0x42, 0x7b, 0x32, 0xb2, 0xfb, 0xc9, 0xe9, 0xdf, 0xce, 0xdc, 0xe9, 0x99, 0x63, 0x3d, 0x3f,
	0x73, 0xac, 0xbf, 0xce, 0x1c, 0xeb, 0xbb, 0x73, 0x67, 0xee, 0xf9, 0xb9, 0x33, 0xf7, 0xc7, 0xb9,
	0x33, 0xf7, 0xf9, 0xce, 0xb8, 0x76, 0xf3, 0xca, 0x7f, 0x98, 0x12, 0x31, 0xa4, 0xac, 0x3f, 0x0a,
	0x34, 0x8e, 0x3f, 0x68, 0x9c, 0xa8, 0xff, 0x0d, 0x54, 0x32, 0x9d, 0xa2, 0x7a, 0x3b, 0xed, 0xfc,
	0x17, 0x00, 0x00, 0xff, 0xff, 0x80, 0x91, 0x9f, 0x2e, 0x38, 0x0c, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MaxRewardsBlockTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxRewardsBlockTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintAmm(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if m.MaxNumPrivateFarmingPlans != 0 {
		i = encodeVarintAmm(dAtA, i, uint64(m.MaxNumPrivateFarmingPlans))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PrivateFarmingPlanCreationFee) > 0 {
		for iNdEx := len(m.PrivateFarmingPlanCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrivateFarmingPlanCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.DefaultTickSpacing != 0 {
		i = encodeVarintAmm(dAtA, i, uint64(m.DefaultTickSpacing))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SharedPositionCreationFee) > 0 {
		for iNdEx := len(m.SharedPositionCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SharedPositionCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PoolCreationFee) > 0 {
		for iNdEx := len(m.PoolCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintAmm(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.TickSpacing != 0 {
		i = encodeVarintAmm(dAtA, i, uint64(m.TickSpacing))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Denom1) > 0 {
		i -= len(m.Denom1)
		copy(dAtA[i:], m.Denom1)
		i = encodeVarintAmm(dAtA, i, uint64(len(m.Denom1)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom0) > 0 {
		i -= len(m.Denom0)
		copy(dAtA[i:], m.Denom0)
		i = encodeVarintAmm(dAtA, i, uint64(len(m.Denom0)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MarketId != 0 {
		i = encodeVarintAmm(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintAmm(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FarmingRewardsGrowthGlobal) > 0 {
		for iNdEx := len(m.FarmingRewardsGrowthGlobal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FarmingRewardsGrowthGlobal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.FeeGrowthGlobal1.Size()
		i -= size
		if _, err := m.FeeGrowthGlobal1.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAmm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.FeeGrowthGlobal0.Size()
		i -= size
		if _, err := m.FeeGrowthGlobal0.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAmm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CurrentLiquidity.Size()
		i -= size
		if _, err := m.CurrentLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAmm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.CurrentPrice.Size()
		i -= size
		if _, err := m.CurrentPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAmm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.CurrentTick != 0 {
		i = encodeVarintAmm(dAtA, i, uint64(m.CurrentTick))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwedFarmingRewards) > 0 {
		for iNdEx := len(m.OwedFarmingRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OwedFarmingRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.LastFarmingRewardsGrowthInside) > 0 {
		for iNdEx := len(m.LastFarmingRewardsGrowthInside) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastFarmingRewardsGrowthInside[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	{
		size := m.OwedToken1.Size()
		i -= size
		if _, err := m.OwedToken1.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAmm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.OwedToken0.Size()
		i -= size
		if _, err := m.OwedToken0.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAmm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.LastFeeGrowthInside1.Size()
		i -= size
		if _, err := m.LastFeeGrowthInside1.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAmm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.LastFeeGrowthInside0.Size()
		i -= size
		if _, err := m.LastFeeGrowthInside0.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAmm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.Liquidity.Size()
		i -= size
		if _, err := m.Liquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAmm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.UpperTick != 0 {
		i = encodeVarintAmm(dAtA, i, uint64(m.UpperTick))
		i--
		dAtA[i] = 0x28
	}
	if m.LowerTick != 0 {
		i = encodeVarintAmm(dAtA, i, uint64(m.LowerTick))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAmm(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintAmm(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintAmm(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TickInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TickInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TickInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FarmingRewardsGrowthOutside) > 0 {
		for iNdEx := len(m.FarmingRewardsGrowthOutside) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FarmingRewardsGrowthOutside[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAmm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.FeeGrowthOutside1.Size()
		i -= size
		if _, err := m.FeeGrowthOutside1.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAmm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.FeeGrowthOutside0.Size()
		i -= size
		if _, err := m.FeeGrowthOutside0.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAmm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.NetLiquidity.Size()
		i -= size
		if _, err := m.NetLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAmm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.GrossLiquidity.Size()
		i -= size
		if _, err := m.GrossLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAmm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SharedPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SharedPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SharedPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShareDenom) > 0 {
		i -= len(m.ShareDenom)
		copy(dAtA[i:], m.ShareDenom)
		i = encodeVarintAmm(dAtA, i, uint64(len(m.ShareDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.PositionId != 0 {
		i = encodeVarintAmm(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAmm(dAtA []byte, offset int, v uint64) int {
	offset -= sovAmm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolCreationFee) > 0 {
		for _, e := range m.PoolCreationFee {
			l = e.Size()
			n += 1 + l + sovAmm(uint64(l))
		}
	}
	if len(m.SharedPositionCreationFee) > 0 {
		for _, e := range m.SharedPositionCreationFee {
			l = e.Size()
			n += 1 + l + sovAmm(uint64(l))
		}
	}
	if m.DefaultTickSpacing != 0 {
		n += 1 + sovAmm(uint64(m.DefaultTickSpacing))
	}
	if len(m.PrivateFarmingPlanCreationFee) > 0 {
		for _, e := range m.PrivateFarmingPlanCreationFee {
			l = e.Size()
			n += 1 + l + sovAmm(uint64(l))
		}
	}
	if m.MaxNumPrivateFarmingPlans != 0 {
		n += 1 + sovAmm(uint64(m.MaxNumPrivateFarmingPlans))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxRewardsBlockTime)
	n += 1 + l + sovAmm(uint64(l))
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAmm(uint64(m.Id))
	}
	if m.MarketId != 0 {
		n += 1 + sovAmm(uint64(m.MarketId))
	}
	l = len(m.Denom0)
	if l > 0 {
		n += 1 + l + sovAmm(uint64(l))
	}
	l = len(m.Denom1)
	if l > 0 {
		n += 1 + l + sovAmm(uint64(l))
	}
	if m.TickSpacing != 0 {
		n += 1 + sovAmm(uint64(m.TickSpacing))
	}
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovAmm(uint64(l))
	}
	return n
}

func (m *PoolState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentTick != 0 {
		n += 1 + sovAmm(uint64(m.CurrentTick))
	}
	l = m.CurrentPrice.Size()
	n += 1 + l + sovAmm(uint64(l))
	l = m.CurrentLiquidity.Size()
	n += 1 + l + sovAmm(uint64(l))
	l = m.FeeGrowthGlobal0.Size()
	n += 1 + l + sovAmm(uint64(l))
	l = m.FeeGrowthGlobal1.Size()
	n += 1 + l + sovAmm(uint64(l))
	if len(m.FarmingRewardsGrowthGlobal) > 0 {
		for _, e := range m.FarmingRewardsGrowthGlobal {
			l = e.Size()
			n += 1 + l + sovAmm(uint64(l))
		}
	}
	return n
}

func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAmm(uint64(m.Id))
	}
	if m.PoolId != 0 {
		n += 1 + sovAmm(uint64(m.PoolId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAmm(uint64(l))
	}
	if m.LowerTick != 0 {
		n += 1 + sovAmm(uint64(m.LowerTick))
	}
	if m.UpperTick != 0 {
		n += 1 + sovAmm(uint64(m.UpperTick))
	}
	l = m.Liquidity.Size()
	n += 1 + l + sovAmm(uint64(l))
	l = m.LastFeeGrowthInside0.Size()
	n += 1 + l + sovAmm(uint64(l))
	l = m.LastFeeGrowthInside1.Size()
	n += 1 + l + sovAmm(uint64(l))
	l = m.OwedToken0.Size()
	n += 1 + l + sovAmm(uint64(l))
	l = m.OwedToken1.Size()
	n += 1 + l + sovAmm(uint64(l))
	if len(m.LastFarmingRewardsGrowthInside) > 0 {
		for _, e := range m.LastFarmingRewardsGrowthInside {
			l = e.Size()
			n += 1 + l + sovAmm(uint64(l))
		}
	}
	if len(m.OwedFarmingRewards) > 0 {
		for _, e := range m.OwedFarmingRewards {
			l = e.Size()
			n += 1 + l + sovAmm(uint64(l))
		}
	}
	return n
}

func (m *TickInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GrossLiquidity.Size()
	n += 1 + l + sovAmm(uint64(l))
	l = m.NetLiquidity.Size()
	n += 1 + l + sovAmm(uint64(l))
	l = m.FeeGrowthOutside0.Size()
	n += 1 + l + sovAmm(uint64(l))
	l = m.FeeGrowthOutside1.Size()
	n += 1 + l + sovAmm(uint64(l))
	if len(m.FarmingRewardsGrowthOutside) > 0 {
		for _, e := range m.FarmingRewardsGrowthOutside {
			l = e.Size()
			n += 1 + l + sovAmm(uint64(l))
		}
	}
	return n
}

func (m *SharedPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != 0 {
		n += 1 + sovAmm(uint64(m.PositionId))
	}
	l = len(m.ShareDenom)
	if l > 0 {
		n += 1 + l + sovAmm(uint64(l))
	}
	return n
}

func sovAmm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAmm(x uint64) (n int) {
	return sovAmm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCreationFee = append(m.PoolCreationFee, types.Coin{})
			if err := m.PoolCreationFee[len(m.PoolCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedPositionCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharedPositionCreationFee = append(m.SharedPositionCreationFee, types.Coin{})
			if err := m.SharedPositionCreationFee[len(m.SharedPositionCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTickSpacing", wireType)
			}
			m.DefaultTickSpacing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultTickSpacing |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateFarmingPlanCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateFarmingPlanCreationFee = append(m.PrivateFarmingPlanCreationFee, types.Coin{})
			if err := m.PrivateFarmingPlanCreationFee[len(m.PrivateFarmingPlanCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumPrivateFarmingPlans", wireType)
			}
			m.MaxNumPrivateFarmingPlans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumPrivateFarmingPlans |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRewardsBlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MaxRewardsBlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom0 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickSpacing", wireType)
			}
			m.TickSpacing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickSpacing |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTick", wireType)
			}
			m.CurrentTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTick |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeGrowthGlobal0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeGrowthGlobal0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeGrowthGlobal1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeGrowthGlobal1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingRewardsGrowthGlobal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingRewardsGrowthGlobal = append(m.FarmingRewardsGrowthGlobal, types.DecCoin{})
			if err := m.FarmingRewardsGrowthGlobal[len(m.FarmingRewardsGrowthGlobal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerTick", wireType)
			}
			m.LowerTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerTick |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperTick", wireType)
			}
			m.UpperTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperTick |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Liquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFeeGrowthInside0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastFeeGrowthInside0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFeeGrowthInside1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastFeeGrowthInside1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwedToken0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OwedToken0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwedToken1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OwedToken1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFarmingRewardsGrowthInside", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastFarmingRewardsGrowthInside = append(m.LastFarmingRewardsGrowthInside, types.DecCoin{})
			if err := m.LastFarmingRewardsGrowthInside[len(m.LastFarmingRewardsGrowthInside)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwedFarmingRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwedFarmingRewards = append(m.OwedFarmingRewards, types.Coin{})
			if err := m.OwedFarmingRewards[len(m.OwedFarmingRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TickInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrossLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GrossLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeGrowthOutside0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeGrowthOutside0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeGrowthOutside1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeGrowthOutside1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingRewardsGrowthOutside", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingRewardsGrowthOutside = append(m.FarmingRewardsGrowthOutside, types.DecCoin{})
			if err := m.FarmingRewardsGrowthOutside[len(m.FarmingRewardsGrowthOutside)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SharedPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SharedPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SharedPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAmm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAmm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAmm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAmm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAmm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAmm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAmm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAmm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAmm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAmm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAmm = fmt.Errorf("proto: unexpected end of group")
)
