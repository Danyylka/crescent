// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crescent/exchange/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fee35d2c78eeddd, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fee35d2c78eeddd, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryAllSpotMarketsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSpotMarketsRequest) Reset()         { *m = QueryAllSpotMarketsRequest{} }
func (m *QueryAllSpotMarketsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSpotMarketsRequest) ProtoMessage()    {}
func (*QueryAllSpotMarketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fee35d2c78eeddd, []int{2}
}
func (m *QueryAllSpotMarketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSpotMarketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSpotMarketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSpotMarketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSpotMarketsRequest.Merge(m, src)
}
func (m *QueryAllSpotMarketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSpotMarketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSpotMarketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSpotMarketsRequest proto.InternalMessageInfo

func (m *QueryAllSpotMarketsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSpotMarketsResponse struct {
	Markets    []SpotMarketResponse `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets"`
	Pagination *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSpotMarketsResponse) Reset()         { *m = QueryAllSpotMarketsResponse{} }
func (m *QueryAllSpotMarketsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSpotMarketsResponse) ProtoMessage()    {}
func (*QueryAllSpotMarketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fee35d2c78eeddd, []int{3}
}
func (m *QueryAllSpotMarketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSpotMarketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSpotMarketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSpotMarketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSpotMarketsResponse.Merge(m, src)
}
func (m *QueryAllSpotMarketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSpotMarketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSpotMarketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSpotMarketsResponse proto.InternalMessageInfo

func (m *QueryAllSpotMarketsResponse) GetMarkets() []SpotMarketResponse {
	if m != nil {
		return m.Markets
	}
	return nil
}

func (m *QueryAllSpotMarketsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QuerySpotMarketRequest struct {
	MarketId uint64 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QuerySpotMarketRequest) Reset()         { *m = QuerySpotMarketRequest{} }
func (m *QuerySpotMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpotMarketRequest) ProtoMessage()    {}
func (*QuerySpotMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fee35d2c78eeddd, []int{4}
}
func (m *QuerySpotMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotMarketRequest.Merge(m, src)
}
func (m *QuerySpotMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotMarketRequest proto.InternalMessageInfo

func (m *QuerySpotMarketRequest) GetMarketId() uint64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

type QuerySpotMarketResponse struct {
	Market SpotMarketResponse `protobuf:"bytes,1,opt,name=market,proto3" json:"market"`
}

func (m *QuerySpotMarketResponse) Reset()         { *m = QuerySpotMarketResponse{} }
func (m *QuerySpotMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpotMarketResponse) ProtoMessage()    {}
func (*QuerySpotMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fee35d2c78eeddd, []int{5}
}
func (m *QuerySpotMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotMarketResponse.Merge(m, src)
}
func (m *QuerySpotMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotMarketResponse proto.InternalMessageInfo

func (m *QuerySpotMarketResponse) GetMarket() SpotMarketResponse {
	if m != nil {
		return m.Market
	}
	return SpotMarketResponse{}
}

type QuerySpotOrderRequest struct {
	OrderId uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *QuerySpotOrderRequest) Reset()         { *m = QuerySpotOrderRequest{} }
func (m *QuerySpotOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpotOrderRequest) ProtoMessage()    {}
func (*QuerySpotOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fee35d2c78eeddd, []int{6}
}
func (m *QuerySpotOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotOrderRequest.Merge(m, src)
}
func (m *QuerySpotOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotOrderRequest proto.InternalMessageInfo

func (m *QuerySpotOrderRequest) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type QuerySpotOrderResponse struct {
	Order SpotOrder `protobuf:"bytes,1,opt,name=order,proto3" json:"order"`
}

func (m *QuerySpotOrderResponse) Reset()         { *m = QuerySpotOrderResponse{} }
func (m *QuerySpotOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpotOrderResponse) ProtoMessage()    {}
func (*QuerySpotOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fee35d2c78eeddd, []int{7}
}
func (m *QuerySpotOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotOrderResponse.Merge(m, src)
}
func (m *QuerySpotOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotOrderResponse proto.InternalMessageInfo

func (m *QuerySpotOrderResponse) GetOrder() SpotOrder {
	if m != nil {
		return m.Order
	}
	return SpotOrder{}
}

type QueryBestSwapExactInRoutesRequest struct {
	Input       types.Coin `protobuf:"bytes,1,opt,name=input,proto3" json:"input"`
	OutputDenom string     `protobuf:"bytes,2,opt,name=output_denom,json=outputDenom,proto3" json:"output_denom,omitempty"`
}

func (m *QueryBestSwapExactInRoutesRequest) Reset()         { *m = QueryBestSwapExactInRoutesRequest{} }
func (m *QueryBestSwapExactInRoutesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBestSwapExactInRoutesRequest) ProtoMessage()    {}
func (*QueryBestSwapExactInRoutesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fee35d2c78eeddd, []int{8}
}
func (m *QueryBestSwapExactInRoutesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBestSwapExactInRoutesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBestSwapExactInRoutesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBestSwapExactInRoutesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBestSwapExactInRoutesRequest.Merge(m, src)
}
func (m *QueryBestSwapExactInRoutesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBestSwapExactInRoutesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBestSwapExactInRoutesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBestSwapExactInRoutesRequest proto.InternalMessageInfo

func (m *QueryBestSwapExactInRoutesRequest) GetInput() types.Coin {
	if m != nil {
		return m.Input
	}
	return types.Coin{}
}

func (m *QueryBestSwapExactInRoutesRequest) GetOutputDenom() string {
	if m != nil {
		return m.OutputDenom
	}
	return ""
}

type QueryBestSwapExactInRoutesResponse struct {
	Routes []uint64   `protobuf:"varint,1,rep,packed,name=routes,proto3" json:"routes,omitempty"`
	Output types.Coin `protobuf:"bytes,2,opt,name=output,proto3" json:"output"`
}

func (m *QueryBestSwapExactInRoutesResponse) Reset()         { *m = QueryBestSwapExactInRoutesResponse{} }
func (m *QueryBestSwapExactInRoutesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBestSwapExactInRoutesResponse) ProtoMessage()    {}
func (*QueryBestSwapExactInRoutesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fee35d2c78eeddd, []int{9}
}
func (m *QueryBestSwapExactInRoutesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBestSwapExactInRoutesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBestSwapExactInRoutesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBestSwapExactInRoutesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBestSwapExactInRoutesResponse.Merge(m, src)
}
func (m *QueryBestSwapExactInRoutesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBestSwapExactInRoutesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBestSwapExactInRoutesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBestSwapExactInRoutesResponse proto.InternalMessageInfo

func (m *QueryBestSwapExactInRoutesResponse) GetRoutes() []uint64 {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *QueryBestSwapExactInRoutesResponse) GetOutput() types.Coin {
	if m != nil {
		return m.Output
	}
	return types.Coin{}
}

type SpotMarketResponse struct {
	Id            uint64                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseDenom     string                                  `protobuf:"bytes,2,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	QuoteDenom    string                                  `protobuf:"bytes,3,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	EscrowAddress string                                  `protobuf:"bytes,4,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty"`
	LastPrice     *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=last_price,json=lastPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"last_price,omitempty"`
}

func (m *SpotMarketResponse) Reset()         { *m = SpotMarketResponse{} }
func (m *SpotMarketResponse) String() string { return proto.CompactTextString(m) }
func (*SpotMarketResponse) ProtoMessage()    {}
func (*SpotMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1fee35d2c78eeddd, []int{10}
}
func (m *SpotMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpotMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpotMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpotMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotMarketResponse.Merge(m, src)
}
func (m *SpotMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *SpotMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SpotMarketResponse proto.InternalMessageInfo

func (m *SpotMarketResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SpotMarketResponse) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *SpotMarketResponse) GetQuoteDenom() string {
	if m != nil {
		return m.QuoteDenom
	}
	return ""
}

func (m *SpotMarketResponse) GetEscrowAddress() string {
	if m != nil {
		return m.EscrowAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "crescent.exchange.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "crescent.exchange.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryAllSpotMarketsRequest)(nil), "crescent.exchange.v1beta1.QueryAllSpotMarketsRequest")
	proto.RegisterType((*QueryAllSpotMarketsResponse)(nil), "crescent.exchange.v1beta1.QueryAllSpotMarketsResponse")
	proto.RegisterType((*QuerySpotMarketRequest)(nil), "crescent.exchange.v1beta1.QuerySpotMarketRequest")
	proto.RegisterType((*QuerySpotMarketResponse)(nil), "crescent.exchange.v1beta1.QuerySpotMarketResponse")
	proto.RegisterType((*QuerySpotOrderRequest)(nil), "crescent.exchange.v1beta1.QuerySpotOrderRequest")
	proto.RegisterType((*QuerySpotOrderResponse)(nil), "crescent.exchange.v1beta1.QuerySpotOrderResponse")
	proto.RegisterType((*QueryBestSwapExactInRoutesRequest)(nil), "crescent.exchange.v1beta1.QueryBestSwapExactInRoutesRequest")
	proto.RegisterType((*QueryBestSwapExactInRoutesResponse)(nil), "crescent.exchange.v1beta1.QueryBestSwapExactInRoutesResponse")
	proto.RegisterType((*SpotMarketResponse)(nil), "crescent.exchange.v1beta1.SpotMarketResponse")
}

func init() {
	proto.RegisterFile("crescent/exchange/v1beta1/query.proto", fileDescriptor_1fee35d2c78eeddd)
}

var fileDescriptor_1fee35d2c78eeddd = []byte{
	// 868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0xb3, 0x49, 0xba, 0x79, 0x81, 0x1e, 0x86, 0xdd, 0x25, 0xf5, 0x42, 0xba, 0x31, 0xec,
	0x6e, 0x77, 0xa5, 0xda, 0x24, 0x25, 0x0b, 0x88, 0x22, 0x68, 0x28, 0xa0, 0x08, 0x55, 0x14, 0x57,
	0xe2, 0xd0, 0x8b, 0xe5, 0xd8, 0x83, 0x6b, 0x35, 0xf1, 0xb8, 0x9e, 0x71, 0xd3, 0xaa, 0xea, 0x05,
	0x89, 0x3b, 0x82, 0x9f, 0xc1, 0xa5, 0x17, 0xfe, 0x43, 0x8f, 0x15, 0x48, 0x08, 0x71, 0xa8, 0x50,
	0xcb, 0x0f, 0x59, 0x79, 0x66, 0x1c, 0x27, 0x6a, 0x9a, 0xb4, 0x3d, 0xb5, 0x7e, 0xf3, 0x7d, 0xef,
	0xfb, 0xde, 0xb3, 0xe7, 0x53, 0xe0, 0xa9, 0x13, 0x61, 0xea, 0xe0, 0x80, 0x19, 0xf8, 0xc0, 0xd9,
	0xb1, 0x03, 0x0f, 0x1b, 0xfb, 0x8d, 0x2e, 0x66, 0x76, 0xc3, 0xd8, 0x8b, 0x71, 0x74, 0xa8, 0x87,
	0x11, 0x61, 0x04, 0x2d, 0xa4, 0x30, 0x3d, 0x85, 0xe9, 0x12, 0xa6, 0x3e, 0xf0, 0x88, 0x47, 0x38,
	0xca, 0x48, 0xfe, 0x13, 0x04, 0xf5, 0x1d, 0x8f, 0x10, 0xaf, 0x87, 0x0d, 0x3b, 0xf4, 0x0d, 0x3b,
	0x08, 0x08, 0xb3, 0x99, 0x4f, 0x02, 0x2a, 0x4f, 0x6b, 0x0e, 0xa1, 0x7d, 0x42, 0x8d, 0xae, 0x4d,
	0x33, 0x3d, 0x87, 0xf8, 0x81, 0x3c, 0x7f, 0x39, 0x7a, 0xce, 0x7d, 0x0c, 0x51, 0xa1, 0xed, 0xf9,
	0x01, 0x6f, 0x26, 0xb1, 0x4b, 0xd7, 0x4f, 0x30, 0xf4, 0xca, 0x91, 0xda, 0x03, 0x40, 0xdf, 0x27,
	0xbd, 0x36, 0xed, 0xc8, 0xee, 0x53, 0x13, 0xef, 0xc5, 0x98, 0x32, 0xed, 0x07, 0x78, 0x6b, 0xac,
	0x4a, 0x43, 0x12, 0x50, 0x8c, 0x3e, 0x87, 0x52, 0xc8, 0x2b, 0x55, 0xe5, 0x89, 0xb2, 0x54, 0x69,
	0xd6, 0xf5, 0x6b, 0x57, 0xa0, 0x0b, 0x6a, 0xbb, 0x70, 0x7a, 0xbe, 0x98, 0x33, 0x25, 0x4d, 0x73,
	0x41, 0xe5, 0x7d, 0xd7, 0x7a, 0xbd, 0xad, 0x90, 0xb0, 0x0d, 0x3b, 0xda, 0xc5, 0x2c, 0x55, 0x45,
	0x5f, 0x03, 0x64, 0x93, 0x48, 0x89, 0x67, 0xba, 0x18, 0x5b, 0x4f, 0xc6, 0xd6, 0xc5, 0xfa, 0x33,
	0x09, 0x0f, 0x4b, 0xae, 0x39, 0xc2, 0xd4, 0xfe, 0x50, 0xe0, 0xf1, 0x44, 0x19, 0x39, 0xc6, 0x06,
	0xcc, 0xf5, 0x45, 0xa9, 0xaa, 0x3c, 0xb9, 0xb7, 0x54, 0x69, 0x2e, 0x4f, 0x99, 0x23, 0x6b, 0x90,
	0xf2, 0xe5, 0x4c, 0x69, 0x0f, 0xf4, 0xcd, 0x98, 0xed, 0x3c, 0xb7, 0xfd, 0x7c, 0xa6, 0x6d, 0xd1,
	0x6b, 0xcc, 0x77, 0x0b, 0x1e, 0x71, 0xdb, 0xa3, 0x92, 0x62, 0x33, 0x8f, 0xa1, 0x2c, 0xd4, 0x2c,
	0xdf, 0xe5, 0x8b, 0x29, 0x98, 0xf7, 0x45, 0xa1, 0xe3, 0x6a, 0x3f, 0xc2, 0xdb, 0x57, 0x68, 0x72,
	0xd2, 0x6f, 0xa1, 0x24, 0x60, 0x72, 0x9b, 0x77, 0x1a, 0x54, 0xb6, 0xd0, 0x9a, 0xf0, 0x70, 0xa8,
	0xf3, 0x5d, 0xe4, 0xe2, 0x28, 0x75, 0xb7, 0x00, 0xf7, 0x49, 0xf2, 0x9c, 0x99, 0x9b, 0xe3, 0xcf,
	0x1d, 0x57, 0xdb, 0x1e, 0x19, 0x49, 0x72, 0xa4, 0xb5, 0x2f, 0xa0, 0xc8, 0x41, 0xd2, 0xd9, 0xfb,
	0x33, 0x9c, 0x71, 0xb2, 0x34, 0x24, 0x88, 0xda, 0x31, 0xd4, 0x79, 0xef, 0x36, 0xa6, 0x6c, 0x6b,
	0x60, 0x87, 0x5f, 0x1d, 0xd8, 0x0e, 0xeb, 0x04, 0x26, 0x89, 0x19, 0x1e, 0x7e, 0x53, 0x2d, 0x28,
	0xfa, 0x41, 0x18, 0xa7, 0x0b, 0x58, 0x18, 0x7b, 0x2f, 0xa9, 0xc0, 0x97, 0xc4, 0x0f, 0xd2, 0xde,
	0x1c, 0x8d, 0xea, 0xf0, 0x06, 0x89, 0x59, 0x18, 0x33, 0xcb, 0xc5, 0x01, 0xe9, 0xf3, 0xb7, 0x5a,
	0x36, 0x2b, 0xa2, 0xb6, 0x9e, 0x94, 0xb4, 0x18, 0xb4, 0x69, 0xf2, 0x72, 0xcc, 0x47, 0x50, 0x8a,
	0x78, 0x85, 0x7f, 0x6a, 0x05, 0x53, 0x3e, 0xa1, 0x8f, 0xa0, 0x24, 0x9a, 0xc9, 0x0f, 0x66, 0xa6,
	0x31, 0x09, 0xd7, 0xfe, 0x56, 0x00, 0x4d, 0x78, 0xd3, 0xf3, 0x90, 0x1f, 0x6e, 0x3f, 0xef, 0xbb,
	0xe8, 0x5d, 0x80, 0xa4, 0xd3, 0x98, 0xfd, 0x72, 0x52, 0xe1, 0xe6, 0xd1, 0x22, 0x54, 0xf6, 0x62,
	0xc2, 0xd2, 0xf3, 0x7b, 0xfc, 0x1c, 0x78, 0x49, 0x00, 0x9e, 0xc2, 0x3c, 0xa6, 0x4e, 0x44, 0x06,
	0x96, 0xed, 0xba, 0x11, 0xa6, 0xb4, 0x5a, 0xe0, 0x98, 0x37, 0x45, 0x75, 0x4d, 0x14, 0x51, 0x07,
	0xa0, 0x67, 0x53, 0x66, 0x85, 0x91, 0xef, 0xe0, 0x6a, 0x31, 0x81, 0xb4, 0x5f, 0xfe, 0x7b, 0xbe,
	0xf8, 0xcc, 0xf3, 0xd9, 0x4e, 0xdc, 0xd5, 0x1d, 0xd2, 0x37, 0x64, 0x6e, 0x89, 0x3f, 0xcb, 0xd4,
	0xdd, 0x35, 0xd8, 0x61, 0x88, 0xa9, 0xbe, 0x8e, 0x1d, 0xb3, 0x9c, 0xb0, 0x37, 0x13, 0x72, 0xf3,
	0xe7, 0x39, 0x28, 0xf2, 0x85, 0xa2, 0x5f, 0x15, 0x28, 0x89, 0xf8, 0x40, 0xd3, 0x3e, 0xd8, 0xab,
	0xb9, 0xa5, 0xea, 0x37, 0x85, 0x8b, 0xad, 0x69, 0x2f, 0x7e, 0xfa, 0xeb, 0xff, 0xdf, 0xf2, 0xef,
	0xa1, 0xba, 0x71, 0x7d, 0x60, 0x8a, 0xe8, 0x42, 0x27, 0x0a, 0xcc, 0x8f, 0xe7, 0x09, 0x6a, 0xcd,
	0x52, 0x9b, 0x18, 0x73, 0xea, 0xab, 0xdb, 0xd2, 0xa4, 0x59, 0x83, 0x9b, 0x7d, 0x81, 0x9e, 0x4f,
	0x31, 0x4b, 0x43, 0xc2, 0x8c, 0x34, 0x98, 0x4e, 0x14, 0x80, 0xac, 0x11, 0x6a, 0xcc, 0xd2, 0xbd,
	0x92, 0x3b, 0x6a, 0xf3, 0x36, 0x14, 0x69, 0xf3, 0x53, 0x6e, 0xb3, 0x85, 0x56, 0x6e, 0x68, 0xd3,
	0x38, 0x1a, 0x46, 0xdb, 0x31, 0xfa, 0x5d, 0x81, 0xf2, 0xf0, 0xba, 0xa3, 0x0f, 0x6e, 0x22, 0x3f,
	0x1a, 0x45, 0x6a, 0xe3, 0x16, 0x0c, 0xe9, 0xf7, 0x13, 0xee, 0x77, 0x05, 0x35, 0x66, 0xf9, 0xe5,
	0xa9, 0x43, 0x8d, 0xa3, 0x34, 0xeb, 0x8e, 0xd1, 0x9f, 0x0a, 0x3c, 0x9c, 0x78, 0xfd, 0xd1, 0xea,
	0x2c, 0x1f, 0xd3, 0x42, 0x4b, 0xfd, 0xec, 0x8e, 0x6c, 0x39, 0xd1, 0x2a, 0x9f, 0xe8, 0x15, 0xfa,
	0x70, 0xca, 0x44, 0x5d, 0x4c, 0x99, 0x45, 0x07, 0x76, 0x68, 0xe1, 0xa4, 0x87, 0xe5, 0x07, 0x96,
	0x48, 0xa6, 0xb6, 0x79, 0x7a, 0x51, 0x53, 0xce, 0x2e, 0x6a, 0xca, 0x7f, 0x17, 0x35, 0xe5, 0x97,
	0xcb, 0x5a, 0xee, 0xec, 0xb2, 0x96, 0xfb, 0xe7, 0xb2, 0x96, 0xdb, 0xfe, 0x78, 0xf4, 0x52, 0xcb,
	0xce, 0xcb, 0x01, 0x66, 0x03, 0x12, 0xed, 0x66, 0x52, 0xfb, 0x2d, 0xe3, 0x20, 0xd3, 0xe3, 0x57,
	0xbd, 0x5b, 0xe2, 0x3f, 0x36, 0x56, 0x5e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x15, 0x75, 0xf0, 0x5d,
	0x5a, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	AllSpotMarkets(ctx context.Context, in *QueryAllSpotMarketsRequest, opts ...grpc.CallOption) (*QueryAllSpotMarketsResponse, error)
	SpotMarket(ctx context.Context, in *QuerySpotMarketRequest, opts ...grpc.CallOption) (*QuerySpotMarketResponse, error)
	SpotOrder(ctx context.Context, in *QuerySpotOrderRequest, opts ...grpc.CallOption) (*QuerySpotOrderResponse, error)
	BestSwapExactInRoutes(ctx context.Context, in *QueryBestSwapExactInRoutesRequest, opts ...grpc.CallOption) (*QueryBestSwapExactInRoutesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/crescent.exchange.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllSpotMarkets(ctx context.Context, in *QueryAllSpotMarketsRequest, opts ...grpc.CallOption) (*QueryAllSpotMarketsResponse, error) {
	out := new(QueryAllSpotMarketsResponse)
	err := c.cc.Invoke(ctx, "/crescent.exchange.v1beta1.Query/AllSpotMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotMarket(ctx context.Context, in *QuerySpotMarketRequest, opts ...grpc.CallOption) (*QuerySpotMarketResponse, error) {
	out := new(QuerySpotMarketResponse)
	err := c.cc.Invoke(ctx, "/crescent.exchange.v1beta1.Query/SpotMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotOrder(ctx context.Context, in *QuerySpotOrderRequest, opts ...grpc.CallOption) (*QuerySpotOrderResponse, error) {
	out := new(QuerySpotOrderResponse)
	err := c.cc.Invoke(ctx, "/crescent.exchange.v1beta1.Query/SpotOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BestSwapExactInRoutes(ctx context.Context, in *QueryBestSwapExactInRoutesRequest, opts ...grpc.CallOption) (*QueryBestSwapExactInRoutesResponse, error) {
	out := new(QueryBestSwapExactInRoutesResponse)
	err := c.cc.Invoke(ctx, "/crescent.exchange.v1beta1.Query/BestSwapExactInRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	AllSpotMarkets(context.Context, *QueryAllSpotMarketsRequest) (*QueryAllSpotMarketsResponse, error)
	SpotMarket(context.Context, *QuerySpotMarketRequest) (*QuerySpotMarketResponse, error)
	SpotOrder(context.Context, *QuerySpotOrderRequest) (*QuerySpotOrderResponse, error)
	BestSwapExactInRoutes(context.Context, *QueryBestSwapExactInRoutesRequest) (*QueryBestSwapExactInRoutesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) AllSpotMarkets(ctx context.Context, req *QueryAllSpotMarketsRequest) (*QueryAllSpotMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllSpotMarkets not implemented")
}
func (*UnimplementedQueryServer) SpotMarket(ctx context.Context, req *QuerySpotMarketRequest) (*QuerySpotMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotMarket not implemented")
}
func (*UnimplementedQueryServer) SpotOrder(ctx context.Context, req *QuerySpotOrderRequest) (*QuerySpotOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotOrder not implemented")
}
func (*UnimplementedQueryServer) BestSwapExactInRoutes(ctx context.Context, req *QueryBestSwapExactInRoutesRequest) (*QueryBestSwapExactInRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BestSwapExactInRoutes not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.exchange.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllSpotMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSpotMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllSpotMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.exchange.v1beta1.Query/AllSpotMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllSpotMarkets(ctx, req.(*QueryAllSpotMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.exchange.v1beta1.Query/SpotMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotMarket(ctx, req.(*QuerySpotMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.exchange.v1beta1.Query/SpotOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotOrder(ctx, req.(*QuerySpotOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BestSwapExactInRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBestSwapExactInRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BestSwapExactInRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.exchange.v1beta1.Query/BestSwapExactInRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BestSwapExactInRoutes(ctx, req.(*QueryBestSwapExactInRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crescent.exchange.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AllSpotMarkets",
			Handler:    _Query_AllSpotMarkets_Handler,
		},
		{
			MethodName: "SpotMarket",
			Handler:    _Query_SpotMarket_Handler,
		},
		{
			MethodName: "SpotOrder",
			Handler:    _Query_SpotOrder_Handler,
		},
		{
			MethodName: "BestSwapExactInRoutes",
			Handler:    _Query_BestSwapExactInRoutes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crescent/exchange/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSpotMarketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSpotMarketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSpotMarketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSpotMarketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSpotMarketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSpotMarketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Markets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySpotOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBestSwapExactInRoutesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBestSwapExactInRoutesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBestSwapExactInRoutesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutputDenom) > 0 {
		i -= len(m.OutputDenom)
		copy(dAtA[i:], m.OutputDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OutputDenom)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBestSwapExactInRoutesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBestSwapExactInRoutesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBestSwapExactInRoutesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Routes) > 0 {
		dAtA9 := make([]byte, len(m.Routes)*10)
		var j8 int
		for _, num := range m.Routes {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintQuery(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpotMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpotMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpotMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastPrice != nil {
		{
			size := m.LastPrice.Size()
			i -= size
			if _, err := m.LastPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSpotMarketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSpotMarketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for _, e := range m.Markets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpotMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovQuery(uint64(m.MarketId))
	}
	return n
}

func (m *QuerySpotMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Market.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySpotOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovQuery(uint64(m.OrderId))
	}
	return n
}

func (m *QuerySpotOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Order.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBestSwapExactInRoutesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Input.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.OutputDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBestSwapExactInRoutesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Routes) > 0 {
		l = 0
		for _, e := range m.Routes {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	l = m.Output.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *SpotMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LastPrice != nil {
		l = m.LastPrice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSpotMarketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSpotMarketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSpotMarketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSpotMarketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSpotMarketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSpotMarketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, SpotMarketResponse{})
			if err := m.Markets[len(m.Markets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBestSwapExactInRoutesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBestSwapExactInRoutesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBestSwapExactInRoutesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBestSwapExactInRoutesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBestSwapExactInRoutesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBestSwapExactInRoutesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Routes = append(m.Routes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Routes) == 0 {
					m.Routes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Routes = append(m.Routes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpotMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpotMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpotMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.LastPrice = &v
			if err := m.LastPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
