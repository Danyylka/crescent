// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crescent/liquidfarming/v1beta1/event.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventLiquidFarmCreated struct {
	LiquidFarmId uint64                                 `protobuf:"varint,1,opt,name=liquid_farm_id,json=liquidFarmId,proto3" json:"liquid_farm_id,omitempty"`
	PoolId       uint64                                 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	LowerTick    int32                                  `protobuf:"varint,3,opt,name=lower_tick,json=lowerTick,proto3" json:"lower_tick,omitempty"`
	UpperTick    int32                                  `protobuf:"varint,4,opt,name=upper_tick,json=upperTick,proto3" json:"upper_tick,omitempty"`
	MinBidAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=min_bid_amount,json=minBidAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_bid_amount"`
	FeeRate      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=fee_rate,json=feeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fee_rate"`
}

func (m *EventLiquidFarmCreated) Reset()         { *m = EventLiquidFarmCreated{} }
func (m *EventLiquidFarmCreated) String() string { return proto.CompactTextString(m) }
func (*EventLiquidFarmCreated) ProtoMessage()    {}
func (*EventLiquidFarmCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe26f03baf94df8e, []int{0}
}
func (m *EventLiquidFarmCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLiquidFarmCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLiquidFarmCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLiquidFarmCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLiquidFarmCreated.Merge(m, src)
}
func (m *EventLiquidFarmCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventLiquidFarmCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLiquidFarmCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventLiquidFarmCreated proto.InternalMessageInfo

type EventMintShare struct {
	Minter       string                                   `protobuf:"bytes,1,opt,name=minter,proto3" json:"minter,omitempty"`
	LiquidFarmId uint64                                   `protobuf:"varint,2,opt,name=liquid_farm_id,json=liquidFarmId,proto3" json:"liquid_farm_id,omitempty"`
	MintedShare  types.Coin                               `protobuf:"bytes,3,opt,name=minted_share,json=mintedShare,proto3" json:"minted_share"`
	Liquidity    github_com_cosmos_cosmos_sdk_types.Int   `protobuf:"bytes,4,opt,name=liquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"liquidity"`
	Amount       github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *EventMintShare) Reset()         { *m = EventMintShare{} }
func (m *EventMintShare) String() string { return proto.CompactTextString(m) }
func (*EventMintShare) ProtoMessage()    {}
func (*EventMintShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe26f03baf94df8e, []int{1}
}
func (m *EventMintShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMintShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMintShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMintShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMintShare.Merge(m, src)
}
func (m *EventMintShare) XXX_Size() int {
	return m.Size()
}
func (m *EventMintShare) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMintShare.DiscardUnknown(m)
}

var xxx_messageInfo_EventMintShare proto.InternalMessageInfo

type EventBurnShare struct {
	Burner           string                                   `protobuf:"bytes,1,opt,name=burner,proto3" json:"burner,omitempty"`
	LiquidFarmId     uint64                                   `protobuf:"varint,2,opt,name=liquid_farm_id,json=liquidFarmId,proto3" json:"liquid_farm_id,omitempty"`
	Share            types.Coin                               `protobuf:"bytes,3,opt,name=share,proto3" json:"share"`
	RemovedLiquidity github_com_cosmos_cosmos_sdk_types.Int   `protobuf:"bytes,4,opt,name=removed_liquidity,json=removedLiquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"removed_liquidity"`
	Amount           github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *EventBurnShare) Reset()         { *m = EventBurnShare{} }
func (m *EventBurnShare) String() string { return proto.CompactTextString(m) }
func (*EventBurnShare) ProtoMessage()    {}
func (*EventBurnShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe26f03baf94df8e, []int{2}
}
func (m *EventBurnShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBurnShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBurnShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBurnShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBurnShare.Merge(m, src)
}
func (m *EventBurnShare) XXX_Size() int {
	return m.Size()
}
func (m *EventBurnShare) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBurnShare.DiscardUnknown(m)
}

var xxx_messageInfo_EventBurnShare proto.InternalMessageInfo

type EventPlaceBid struct {
	Bidder           string     `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
	LiquidFarmId     uint64     `protobuf:"varint,2,opt,name=liquid_farm_id,json=liquidFarmId,proto3" json:"liquid_farm_id,omitempty"`
	RewardsAuctionId uint64     `protobuf:"varint,3,opt,name=rewards_auction_id,json=rewardsAuctionId,proto3" json:"rewards_auction_id,omitempty"`
	Share            types.Coin `protobuf:"bytes,4,opt,name=share,proto3" json:"share"`
}

func (m *EventPlaceBid) Reset()         { *m = EventPlaceBid{} }
func (m *EventPlaceBid) String() string { return proto.CompactTextString(m) }
func (*EventPlaceBid) ProtoMessage()    {}
func (*EventPlaceBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe26f03baf94df8e, []int{3}
}
func (m *EventPlaceBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPlaceBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPlaceBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPlaceBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPlaceBid.Merge(m, src)
}
func (m *EventPlaceBid) XXX_Size() int {
	return m.Size()
}
func (m *EventPlaceBid) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPlaceBid.DiscardUnknown(m)
}

var xxx_messageInfo_EventPlaceBid proto.InternalMessageInfo

type EventBidRefunded struct {
	Bidder           string     `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
	LiquidFarmId     uint64     `protobuf:"varint,2,opt,name=liquid_farm_id,json=liquidFarmId,proto3" json:"liquid_farm_id,omitempty"`
	RewardsAuctionId uint64     `protobuf:"varint,3,opt,name=rewards_auction_id,json=rewardsAuctionId,proto3" json:"rewards_auction_id,omitempty"`
	Share            types.Coin `protobuf:"bytes,4,opt,name=share,proto3" json:"share"`
}

func (m *EventBidRefunded) Reset()         { *m = EventBidRefunded{} }
func (m *EventBidRefunded) String() string { return proto.CompactTextString(m) }
func (*EventBidRefunded) ProtoMessage()    {}
func (*EventBidRefunded) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe26f03baf94df8e, []int{4}
}
func (m *EventBidRefunded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBidRefunded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBidRefunded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBidRefunded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBidRefunded.Merge(m, src)
}
func (m *EventBidRefunded) XXX_Size() int {
	return m.Size()
}
func (m *EventBidRefunded) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBidRefunded.DiscardUnknown(m)
}

var xxx_messageInfo_EventBidRefunded proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EventLiquidFarmCreated)(nil), "crescent.liquidfarming.v1beta1.EventLiquidFarmCreated")
	proto.RegisterType((*EventMintShare)(nil), "crescent.liquidfarming.v1beta1.EventMintShare")
	proto.RegisterType((*EventBurnShare)(nil), "crescent.liquidfarming.v1beta1.EventBurnShare")
	proto.RegisterType((*EventPlaceBid)(nil), "crescent.liquidfarming.v1beta1.EventPlaceBid")
	proto.RegisterType((*EventBidRefunded)(nil), "crescent.liquidfarming.v1beta1.EventBidRefunded")
}

func init() {
	proto.RegisterFile("crescent/liquidfarming/v1beta1/event.proto", fileDescriptor_fe26f03baf94df8e)
}

var fileDescriptor_fe26f03baf94df8e = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x94, 0x41, 0x6b, 0x13, 0x4f,
	0x18, 0xc6, 0xb3, 0x69, 0x9a, 0xfe, 0x33, 0xed, 0xbf, 0xd4, 0x45, 0x6a, 0x2c, 0xb8, 0x0d, 0x41,
	0x24, 0x88, 0xdd, 0xb5, 0x4a, 0x8f, 0x1e, 0xba, 0x55, 0x21, 0x10, 0x41, 0xd6, 0x9e, 0xec, 0x61,
	0x99, 0xdd, 0x79, 0x93, 0x0e, 0xc9, 0xce, 0xc4, 0xd9, 0xd9, 0xc4, 0x7e, 0x0b, 0x3f, 0x87, 0x47,
	0x41, 0xbf, 0x81, 0x98, 0x63, 0x8f, 0xe2, 0xa1, 0x6a, 0xf2, 0x45, 0x64, 0x66, 0x36, 0x69, 0x94,
	0x22, 0x09, 0x82, 0xe0, 0x29, 0x79, 0xe7, 0x79, 0xe6, 0x79, 0xdf, 0xfd, 0xbd, 0x30, 0xe8, 0x6e,
	0x2c, 0x20, 0x8d, 0x81, 0x49, 0xaf, 0x47, 0x5f, 0x65, 0x94, 0xb4, 0xb1, 0x48, 0x28, 0xeb, 0x78,
	0x83, 0xfd, 0x08, 0x24, 0xde, 0xf7, 0x60, 0x00, 0x4c, 0xba, 0x7d, 0xc1, 0x25, 0xb7, 0x9d, 0xa9,
	0xd7, 0xfd, 0xc9, 0xeb, 0xe6, 0xde, 0x9d, 0xeb, 0x1d, 0xde, 0xe1, 0xda, 0xea, 0xa9, 0x7f, 0xe6,
	0xd6, 0x8e, 0x13, 0xf3, 0x34, 0xe1, 0xa9, 0x17, 0xe1, 0x14, 0x66, 0xb1, 0x31, 0xa7, 0xcc, 0xe8,
	0xf5, 0x0f, 0x45, 0xb4, 0xfd, 0x44, 0x75, 0x69, 0xe9, 0xd0, 0xa7, 0x58, 0x24, 0x47, 0x02, 0xb0,
	0x04, 0x62, 0xdf, 0x46, 0x9b, 0xa6, 0x53, 0xa8, 0x5a, 0x85, 0x94, 0x54, 0xad, 0x9a, 0xd5, 0x28,
	0x05, 0x1b, 0xbd, 0x99, 0xb5, 0x49, 0xec, 0x1b, 0x68, 0xad, 0xcf, 0x79, 0x4f, 0xc9, 0x45, 0x2d,
	0x97, 0x55, 0xd9, 0x24, 0xf6, 0x2d, 0x84, 0x7a, 0x7c, 0x08, 0x22, 0x94, 0x34, 0xee, 0x56, 0x57,
	0x6a, 0x56, 0x63, 0x35, 0xa8, 0xe8, 0x93, 0x63, 0x1a, 0x77, 0x95, 0x9c, 0xf5, 0xfb, 0x53, 0xb9,
	0x64, 0x64, 0x7d, 0xa2, 0xe5, 0x63, 0xb4, 0x99, 0x50, 0x16, 0x46, 0x94, 0x84, 0x38, 0xe1, 0x19,
	0x93, 0xd5, 0xd5, 0x9a, 0xd5, 0xa8, 0xf8, 0xee, 0xe8, 0x62, 0xb7, 0xf0, 0xe5, 0x62, 0xf7, 0x4e,
	0x87, 0xca, 0xd3, 0x2c, 0x72, 0x63, 0x9e, 0x78, 0xf9, 0x27, 0x9a, 0x9f, 0xbd, 0x94, 0x74, 0x3d,
	0x79, 0xd6, 0x87, 0xd4, 0x6d, 0x32, 0x19, 0x6c, 0x24, 0x94, 0xf9, 0x94, 0x1c, 0xea, 0x0c, 0xbb,
	0x89, 0xfe, 0x6b, 0x03, 0x84, 0x02, 0x4b, 0xa8, 0x96, 0x97, 0xce, 0x7b, 0x0c, 0x71, 0xb0, 0xd6,
	0x06, 0x08, 0xb0, 0x84, 0xfa, 0xc7, 0x22, 0xda, 0xd4, 0xe0, 0x9e, 0x51, 0x26, 0x5f, 0x9c, 0x62,
	0x01, 0xf6, 0x36, 0x2a, 0x27, 0x94, 0x49, 0x10, 0x1a, 0x54, 0x25, 0xc8, 0xab, 0x2b, 0x40, 0x16,
	0xaf, 0x00, 0xe9, 0xa3, 0x0d, 0xed, 0x27, 0x61, 0xaa, 0xd2, 0x34, 0xb1, 0xf5, 0x07, 0x37, 0x5d,
	0x33, 0x86, 0xab, 0x16, 0x38, 0xdd, 0xb5, 0x7b, 0xc4, 0x29, 0xf3, 0x4b, 0x6a, 0xf4, 0x60, 0xdd,
	0x5c, 0x32, 0x13, 0xb4, 0x50, 0xc5, 0x64, 0x52, 0x79, 0xa6, 0x99, 0x2e, 0x0f, 0xec, 0x32, 0xc0,
	0x8e, 0x51, 0x79, 0xc6, 0x7e, 0xe5, 0xf7, 0xb3, 0xdc, 0x57, 0x5d, 0xde, 0x7e, 0xdd, 0x6d, 0x2c,
	0xd0, 0x45, 0x5d, 0x48, 0x83, 0x3c, 0xba, 0xfe, 0x69, 0xca, 0xd1, 0xcf, 0x04, 0x9b, 0x71, 0x8c,
	0x32, 0xc1, 0x2e, 0x39, 0x9a, 0x6a, 0x41, 0x8e, 0x07, 0x68, 0x75, 0x29, 0x80, 0xc6, 0x6d, 0x9f,
	0xa0, 0x6b, 0x02, 0x12, 0x3e, 0x00, 0x12, 0xfe, 0x29, 0xc2, 0xad, 0x3c, 0xa8, 0xf5, 0x77, 0x49,
	0xbe, 0xb3, 0xd0, 0xff, 0x9a, 0xe4, 0xf3, 0x1e, 0x8e, 0xc1, 0xa7, 0x44, 0x83, 0xa4, 0x84, 0xcc,
	0x81, 0xd4, 0xd5, 0x82, 0x20, 0xef, 0x21, 0x5b, 0xc0, 0x10, 0x0b, 0x92, 0x86, 0x38, 0x8b, 0x25,
	0xe5, 0x4c, 0x39, 0x57, 0xb4, 0x73, 0x2b, 0x57, 0x0e, 0x8d, 0x30, 0x8f, 0xbd, 0xb4, 0x0c, 0xf6,
	0xfa, 0x7b, 0x0b, 0x6d, 0x99, 0xf5, 0x53, 0x12, 0x40, 0x3b, 0x63, 0x04, 0xfe, 0x85, 0xb9, 0xfd,
	0x93, 0xd1, 0x77, 0xa7, 0x30, 0x1a, 0x3b, 0xd6, 0xf9, 0xd8, 0xb1, 0xbe, 0x8d, 0x1d, 0xeb, 0xcd,
	0xc4, 0x29, 0x9c, 0x4f, 0x9c, 0xc2, 0xe7, 0x89, 0x53, 0x78, 0xf9, 0x68, 0x7e, 0x79, 0xf9, 0xb3,
	0xbd, 0xc7, 0x40, 0x0e, 0xb9, 0xe8, 0xce, 0x0e, 0xbc, 0xc1, 0x81, 0xf7, 0xfa, 0x97, 0x87, 0x5f,
	0xef, 0x35, 0x2a, 0xeb, 0xb7, 0xf9, 0xe1, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x85, 0xe8,
	0x71, 0x1f, 0x06, 0x00, 0x00,
}

func (m *EventLiquidFarmCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLiquidFarmCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventLiquidFarmCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FeeRate.Size()
		i -= size
		if _, err := m.FeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MinBidAmount.Size()
		i -= size
		if _, err := m.MinBidAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.UpperTick != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.UpperTick))
		i--
		dAtA[i] = 0x20
	}
	if m.LowerTick != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.LowerTick))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.LiquidFarmId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.LiquidFarmId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventMintShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMintShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMintShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.Liquidity.Size()
		i -= size
		if _, err := m.Liquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.MintedShare.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.LiquidFarmId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.LiquidFarmId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Minter) > 0 {
		i -= len(m.Minter)
		copy(dAtA[i:], m.Minter)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Minter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBurnShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBurnShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBurnShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.RemovedLiquidity.Size()
		i -= size
		if _, err := m.RemovedLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Share.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.LiquidFarmId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.LiquidFarmId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Burner) > 0 {
		i -= len(m.Burner)
		copy(dAtA[i:], m.Burner)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Burner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventPlaceBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPlaceBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPlaceBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Share.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.RewardsAuctionId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.RewardsAuctionId))
		i--
		dAtA[i] = 0x18
	}
	if m.LiquidFarmId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.LiquidFarmId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBidRefunded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBidRefunded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBidRefunded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Share.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.RewardsAuctionId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.RewardsAuctionId))
		i--
		dAtA[i] = 0x18
	}
	if m.LiquidFarmId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.LiquidFarmId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventLiquidFarmCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiquidFarmId != 0 {
		n += 1 + sovEvent(uint64(m.LiquidFarmId))
	}
	if m.PoolId != 0 {
		n += 1 + sovEvent(uint64(m.PoolId))
	}
	if m.LowerTick != 0 {
		n += 1 + sovEvent(uint64(m.LowerTick))
	}
	if m.UpperTick != 0 {
		n += 1 + sovEvent(uint64(m.UpperTick))
	}
	l = m.MinBidAmount.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.FeeRate.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventMintShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Minter)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.LiquidFarmId != 0 {
		n += 1 + sovEvent(uint64(m.LiquidFarmId))
	}
	l = m.MintedShare.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.Liquidity.Size()
	n += 1 + l + sovEvent(uint64(l))
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *EventBurnShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Burner)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.LiquidFarmId != 0 {
		n += 1 + sovEvent(uint64(m.LiquidFarmId))
	}
	l = m.Share.Size()
	n += 1 + l + sovEvent(uint64(l))
	l = m.RemovedLiquidity.Size()
	n += 1 + l + sovEvent(uint64(l))
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	return n
}

func (m *EventPlaceBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.LiquidFarmId != 0 {
		n += 1 + sovEvent(uint64(m.LiquidFarmId))
	}
	if m.RewardsAuctionId != 0 {
		n += 1 + sovEvent(uint64(m.RewardsAuctionId))
	}
	l = m.Share.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventBidRefunded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.LiquidFarmId != 0 {
		n += 1 + sovEvent(uint64(m.LiquidFarmId))
	}
	if m.RewardsAuctionId != 0 {
		n += 1 + sovEvent(uint64(m.RewardsAuctionId))
	}
	l = m.Share.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventLiquidFarmCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLiquidFarmCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLiquidFarmCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidFarmId", wireType)
			}
			m.LiquidFarmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidFarmId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerTick", wireType)
			}
			m.LowerTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerTick |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperTick", wireType)
			}
			m.UpperTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperTick |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBidAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinBidAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMintShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMintShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMintShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidFarmId", wireType)
			}
			m.LiquidFarmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidFarmId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintedShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintedShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Liquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBurnShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBurnShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBurnShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Burner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidFarmId", wireType)
			}
			m.LiquidFarmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidFarmId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemovedLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPlaceBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPlaceBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPlaceBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidFarmId", wireType)
			}
			m.LiquidFarmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidFarmId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsAuctionId", wireType)
			}
			m.RewardsAuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardsAuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBidRefunded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBidRefunded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBidRefunded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidFarmId", wireType)
			}
			m.LiquidFarmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidFarmId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsAuctionId", wireType)
			}
			m.RewardsAuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardsAuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
