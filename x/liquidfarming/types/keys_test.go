package types_test

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/require"

	sdk "github.com/cosmos/cosmos-sdk/types"
	"github.com/tendermint/tendermint/crypto"

	"github.com/crescent-network/crescent/v5/x/liquidfarming/types"
)

func TestGetLiquidFarmKey(t *testing.T) {
	require.Equal(t, []byte{0xe3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, types.GetLiquidFarmKey(0))
	require.Equal(t, []byte{0xe3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9}, types.GetLiquidFarmKey(9))
	require.Equal(t, []byte{0xe3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa}, types.GetLiquidFarmKey(10))
}

func TestGetPreviousWinningBidKey(t *testing.T) {
	require.Equal(t, []byte{0xe4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, types.GetPreviousWinningBidKey(0))
	require.Equal(t, []byte{0xe4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9}, types.GetPreviousWinningBidKey(9))
	require.Equal(t, []byte{0xe4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa}, types.GetPreviousWinningBidKey(10))
}

func TestGetRewardsAuctionKey(t *testing.T) {
	for i, tc := range []struct {
		auctionId uint64
		expected  []byte
	}{
		{
			1,
			[]byte{0xe5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
		},
		{
			5,
			[]byte{0xe5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1},
		},
		{
			5,
			[]byte{0xe5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5},
		},
	} {
		t.Run(fmt.Sprint(i), func(t *testing.T) {
			key := types.GetRewardsAuctionKey(tc.auctionId)
			require.Equal(t, tc.expected, key)
		})
	}
}

func TestGetBidKey(t *testing.T) {
	for i, tc := range []struct {
		auctionId  uint64
		bidderAddr sdk.AccAddress
		expected   []byte
	}{
		{
			1,
			sdk.AccAddress(crypto.AddressHash([]byte("bidder1"))),
			[]byte{0xe6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x14,
				0x20, 0x5c, 0xa, 0x82, 0xa, 0xf1, 0xed, 0x98, 0x39, 0x6a,
				0x35, 0xfe, 0xe3, 0x5d, 0x5, 0x2c, 0xd7, 0x96, 0x5a, 0x37},
		},
		{
			1,
			sdk.AccAddress(crypto.AddressHash([]byte("bidder3"))),
			[]byte{0xe6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x14,
				0xe, 0x99, 0x7b, 0x9b, 0x5c, 0xef, 0x81, 0x2f, 0xc6, 0x3f,
				0xb6, 0x8b, 0x27, 0x42, 0x8a, 0xab, 0x7a, 0x58, 0xbc, 0x5e},
		},
		{
			5,
			sdk.AccAddress(crypto.AddressHash([]byte("bidder22"))),
			[]byte{0xe6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x14,
				0x4c, 0xf1, 0xbd, 0x90, 0x1, 0x70, 0x78, 0xfb, 0xfc, 0x87,
				0x51, 0x9d, 0x40, 0x4, 0x39, 0x9f, 0x4d, 0xe3, 0xc9, 0x43},
		},
	} {
		t.Run(fmt.Sprint(i), func(t *testing.T) {
			key := types.GetBidKey(tc.auctionId, tc.bidderAddr)
			require.Equal(t, tc.expected, key)
		})
	}
}

func TestGetBidsByRewardsAuctionIteratorPrefix(t *testing.T) {
	require.Equal(t, []byte{0xe6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, types.GetBidsByRewardsAuctionIteratorPrefix(0))
	require.Equal(t, []byte{0xe6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9}, types.GetBidsByRewardsAuctionIteratorPrefix(9))
	require.Equal(t, []byte{0xe6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa}, types.GetBidsByRewardsAuctionIteratorPrefix(10))
}
