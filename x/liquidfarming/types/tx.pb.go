// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crescent/liquidfarming/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgMintShare defines a SDK message for minting share of LiquidFarm.
type MsgMintShare struct {
	Sender        string                                   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	LiquidFarmId  uint64                                   `protobuf:"varint,2,opt,name=liquid_farm_id,json=liquidFarmId,proto3" json:"liquid_farm_id,omitempty"`
	DesiredAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=desired_amount,json=desiredAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"desired_amount"`
}

func (m *MsgMintShare) Reset()         { *m = MsgMintShare{} }
func (m *MsgMintShare) String() string { return proto.CompactTextString(m) }
func (*MsgMintShare) ProtoMessage()    {}
func (*MsgMintShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f87d9a2dc69f382, []int{0}
}
func (m *MsgMintShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintShare.Merge(m, src)
}
func (m *MsgMintShare) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintShare) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintShare.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintShare proto.InternalMessageInfo

type MsgMintShareResponse struct {
	PositionId uint64                                   `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	Liquidity  github_com_cosmos_cosmos_sdk_types.Int   `protobuf:"bytes,2,opt,name=liquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"liquidity"`
	Amount     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgMintShareResponse) Reset()         { *m = MsgMintShareResponse{} }
func (m *MsgMintShareResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintShareResponse) ProtoMessage()    {}
func (*MsgMintShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f87d9a2dc69f382, []int{1}
}
func (m *MsgMintShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintShareResponse.Merge(m, src)
}
func (m *MsgMintShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintShareResponse proto.InternalMessageInfo

// MsgBurnShare defines a SDK message for burning share of LiquidFarm.
type MsgBurnShare struct {
	Sender       string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	LiquidFarmId uint64     `protobuf:"varint,2,opt,name=liquid_farm_id,json=liquidFarmId,proto3" json:"liquid_farm_id,omitempty"`
	Share        types.Coin `protobuf:"bytes,3,opt,name=share,proto3" json:"share"`
}

func (m *MsgBurnShare) Reset()         { *m = MsgBurnShare{} }
func (m *MsgBurnShare) String() string { return proto.CompactTextString(m) }
func (*MsgBurnShare) ProtoMessage()    {}
func (*MsgBurnShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f87d9a2dc69f382, []int{2}
}
func (m *MsgBurnShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnShare.Merge(m, src)
}
func (m *MsgBurnShare) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnShare) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnShare.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnShare proto.InternalMessageInfo

type MsgBurnShareResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgBurnShareResponse) Reset()         { *m = MsgBurnShareResponse{} }
func (m *MsgBurnShareResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnShareResponse) ProtoMessage()    {}
func (*MsgBurnShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f87d9a2dc69f382, []int{3}
}
func (m *MsgBurnShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnShareResponse.Merge(m, src)
}
func (m *MsgBurnShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnShareResponse proto.InternalMessageInfo

// MsgPlaceBid defines a SDK message for placing a bid for a rewards auction.
type MsgPlaceBid struct {
	Sender           string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	LiquidFarmId     uint64     `protobuf:"varint,2,opt,name=liquid_farm_id,json=liquidFarmId,proto3" json:"liquid_farm_id,omitempty"`
	RewardsAuctionId uint64     `protobuf:"varint,3,opt,name=rewards_auction_id,json=rewardsAuctionId,proto3" json:"rewards_auction_id,omitempty"`
	Share            types.Coin `protobuf:"bytes,4,opt,name=share,proto3" json:"share"`
}

func (m *MsgPlaceBid) Reset()         { *m = MsgPlaceBid{} }
func (m *MsgPlaceBid) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceBid) ProtoMessage()    {}
func (*MsgPlaceBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f87d9a2dc69f382, []int{4}
}
func (m *MsgPlaceBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceBid.Merge(m, src)
}
func (m *MsgPlaceBid) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceBid) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceBid.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceBid proto.InternalMessageInfo

type MsgPlaceBidResponse struct {
}

func (m *MsgPlaceBidResponse) Reset()         { *m = MsgPlaceBidResponse{} }
func (m *MsgPlaceBidResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceBidResponse) ProtoMessage()    {}
func (*MsgPlaceBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f87d9a2dc69f382, []int{5}
}
func (m *MsgPlaceBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceBidResponse.Merge(m, src)
}
func (m *MsgPlaceBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceBidResponse proto.InternalMessageInfo

// MsgRefundBid defines a SDK message for refunding the bid that is not winning for the auction.
type MsgRefundBid struct {
	Sender           string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	LiquidFarmId     uint64 `protobuf:"varint,2,opt,name=liquid_farm_id,json=liquidFarmId,proto3" json:"liquid_farm_id,omitempty"`
	RewardsAuctionId uint64 `protobuf:"varint,3,opt,name=rewards_auction_id,json=rewardsAuctionId,proto3" json:"rewards_auction_id,omitempty"`
}

func (m *MsgRefundBid) Reset()         { *m = MsgRefundBid{} }
func (m *MsgRefundBid) String() string { return proto.CompactTextString(m) }
func (*MsgRefundBid) ProtoMessage()    {}
func (*MsgRefundBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f87d9a2dc69f382, []int{6}
}
func (m *MsgRefundBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRefundBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRefundBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRefundBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRefundBid.Merge(m, src)
}
func (m *MsgRefundBid) XXX_Size() int {
	return m.Size()
}
func (m *MsgRefundBid) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRefundBid.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRefundBid proto.InternalMessageInfo

type MsgRefundBidResponse struct {
}

func (m *MsgRefundBidResponse) Reset()         { *m = MsgRefundBidResponse{} }
func (m *MsgRefundBidResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRefundBidResponse) ProtoMessage()    {}
func (*MsgRefundBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f87d9a2dc69f382, []int{7}
}
func (m *MsgRefundBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRefundBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRefundBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRefundBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRefundBidResponse.Merge(m, src)
}
func (m *MsgRefundBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRefundBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRefundBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRefundBidResponse proto.InternalMessageInfo

// MsgFinishRewardsAuctions defines a message for finishing all rewards auctions.
type MsgFinishRewardsAuctions struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgFinishRewardsAuctions) Reset()         { *m = MsgFinishRewardsAuctions{} }
func (m *MsgFinishRewardsAuctions) String() string { return proto.CompactTextString(m) }
func (*MsgFinishRewardsAuctions) ProtoMessage()    {}
func (*MsgFinishRewardsAuctions) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f87d9a2dc69f382, []int{8}
}
func (m *MsgFinishRewardsAuctions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinishRewardsAuctions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinishRewardsAuctions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinishRewardsAuctions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinishRewardsAuctions.Merge(m, src)
}
func (m *MsgFinishRewardsAuctions) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinishRewardsAuctions) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinishRewardsAuctions.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinishRewardsAuctions proto.InternalMessageInfo

type MsgFinishRewardsAuctionsResponse struct {
}

func (m *MsgFinishRewardsAuctionsResponse) Reset()         { *m = MsgFinishRewardsAuctionsResponse{} }
func (m *MsgFinishRewardsAuctionsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFinishRewardsAuctionsResponse) ProtoMessage()    {}
func (*MsgFinishRewardsAuctionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f87d9a2dc69f382, []int{9}
}
func (m *MsgFinishRewardsAuctionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinishRewardsAuctionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinishRewardsAuctionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinishRewardsAuctionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinishRewardsAuctionsResponse.Merge(m, src)
}
func (m *MsgFinishRewardsAuctionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinishRewardsAuctionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinishRewardsAuctionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinishRewardsAuctionsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgMintShare)(nil), "crescent.liquidfarming.v1beta1.MsgMintShare")
	proto.RegisterType((*MsgMintShareResponse)(nil), "crescent.liquidfarming.v1beta1.MsgMintShareResponse")
	proto.RegisterType((*MsgBurnShare)(nil), "crescent.liquidfarming.v1beta1.MsgBurnShare")
	proto.RegisterType((*MsgBurnShareResponse)(nil), "crescent.liquidfarming.v1beta1.MsgBurnShareResponse")
	proto.RegisterType((*MsgPlaceBid)(nil), "crescent.liquidfarming.v1beta1.MsgPlaceBid")
	proto.RegisterType((*MsgPlaceBidResponse)(nil), "crescent.liquidfarming.v1beta1.MsgPlaceBidResponse")
	proto.RegisterType((*MsgRefundBid)(nil), "crescent.liquidfarming.v1beta1.MsgRefundBid")
	proto.RegisterType((*MsgRefundBidResponse)(nil), "crescent.liquidfarming.v1beta1.MsgRefundBidResponse")
	proto.RegisterType((*MsgFinishRewardsAuctions)(nil), "crescent.liquidfarming.v1beta1.MsgFinishRewardsAuctions")
	proto.RegisterType((*MsgFinishRewardsAuctionsResponse)(nil), "crescent.liquidfarming.v1beta1.MsgFinishRewardsAuctionsResponse")
}

func init() {
	proto.RegisterFile("crescent/liquidfarming/v1beta1/tx.proto", fileDescriptor_9f87d9a2dc69f382)
}

var fileDescriptor_9f87d9a2dc69f382 = []byte{
	// 624 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xc7, 0x63, 0x12, 0x22, 0xe2, 0x94, 0x0a, 0x2d, 0x6d, 0x15, 0x72, 0xd8, 0x44, 0x2b, 0x04,
	0x91, 0x68, 0x77, 0x69, 0x4a, 0x25, 0x2e, 0x48, 0x34, 0x48, 0x95, 0x22, 0x11, 0x09, 0x2d, 0x37,
	0x38, 0x44, 0x9b, 0xb5, 0xbb, 0xb1, 0x9a, 0xd8, 0xc1, 0xf6, 0xf6, 0x03, 0x8e, 0xbc, 0x00, 0x12,
	0x6f, 0xc1, 0x89, 0x47, 0xe0, 0x98, 0x63, 0x8f, 0x08, 0xa1, 0x02, 0xc9, 0x8d, 0xa7, 0x40, 0xeb,
	0xfd, 0xc8, 0x96, 0x7e, 0x68, 0x03, 0x94, 0x53, 0xb2, 0xf6, 0x7f, 0x66, 0x7e, 0x33, 0x1e, 0x8f,
	0xe1, 0x5d, 0x97, 0x63, 0xe1, 0x62, 0x2a, 0xad, 0x01, 0x79, 0xe5, 0x13, 0xb4, 0xe3, 0xf0, 0x21,
	0xa1, 0x9e, 0xb5, 0xb7, 0xde, 0xc3, 0xd2, 0x59, 0xb7, 0xe4, 0x81, 0x39, 0xe2, 0x4c, 0x32, 0x4d,
	0x8f, 0x85, 0xe6, 0x09, 0xa1, 0x19, 0x09, 0xab, 0x4b, 0x1e, 0xf3, 0x98, 0x92, 0x5a, 0xc1, 0xbf,
	0xd0, 0xaa, 0xaa, 0xbb, 0x4c, 0x0c, 0x99, 0xb0, 0x7a, 0x8e, 0xc0, 0x89, 0x4f, 0x97, 0x11, 0x1a,
	0xee, 0x1b, 0x9f, 0x00, 0x5c, 0xe8, 0x08, 0xaf, 0x43, 0xa8, 0x7c, 0xde, 0x77, 0x38, 0xd6, 0x56,
	0x60, 0x51, 0x60, 0x8a, 0x30, 0xaf, 0x80, 0x3a, 0x68, 0x94, 0xec, 0xe8, 0x4b, 0xbb, 0x0d, 0x17,
	0xc3, 0xb8, 0xdd, 0x20, 0x70, 0x97, 0xa0, 0xca, 0x95, 0x3a, 0x68, 0x14, 0xec, 0x85, 0x70, 0x75,
	0xdb, 0xe1, 0xc3, 0x36, 0xd2, 0x38, 0x5c, 0x44, 0x58, 0x10, 0x8e, 0x51, 0xd7, 0x19, 0x32, 0x9f,
	0xca, 0x4a, 0xbe, 0x9e, 0x6f, 0x94, 0x9b, 0xb7, 0xcc, 0x90, 0xc3, 0x0c, 0x38, 0x62, 0x64, 0xf3,
	0x09, 0x23, 0xb4, 0x75, 0x7f, 0x7c, 0x5c, 0xcb, 0x7d, 0xf8, 0x56, 0x6b, 0x78, 0x44, 0xf6, 0xfd,
	0x9e, 0xe9, 0xb2, 0xa1, 0x15, 0x41, 0x87, 0x3f, 0x6b, 0x02, 0xed, 0x5a, 0xf2, 0x70, 0x84, 0x85,
	0x32, 0x10, 0xf6, 0xf5, 0x28, 0xc4, 0x96, 0x8a, 0x60, 0xfc, 0x04, 0x70, 0x29, 0x9d, 0x82, 0x8d,
	0xc5, 0x88, 0x51, 0x81, 0xb5, 0x1a, 0x2c, 0x8f, 0x98, 0x20, 0x92, 0x30, 0x1a, 0xf0, 0x02, 0xc5,
	0x0b, 0xe3, 0xa5, 0x36, 0xd2, 0x9e, 0xc2, 0x52, 0x48, 0x4f, 0xe4, 0xa1, 0x4a, 0xa7, 0xd4, 0x32,
	0x03, 0x9a, 0x2f, 0xc7, 0xb5, 0x3b, 0x19, 0x68, 0xda, 0x54, 0xda, 0x33, 0x07, 0x9a, 0x0b, 0x8b,
	0x97, 0x97, 0x73, 0xe4, 0xda, 0x78, 0x1b, 0x9e, 0x57, 0xcb, 0xe7, 0xf4, 0x5f, 0x9c, 0xd7, 0x26,
	0xbc, 0x2a, 0x02, 0x37, 0x95, 0x7c, 0x1d, 0x5c, 0x8c, 0x5c, 0x08, 0x90, 0xed, 0x50, 0x6d, 0xbc,
	0x51, 0x15, 0x4f, 0x20, 0x92, 0x8a, 0xcf, 0x4a, 0x00, 0x2e, 0xaf, 0x04, 0x1f, 0x01, 0x2c, 0x77,
	0x84, 0xf7, 0x6c, 0xe0, 0xb8, 0xb8, 0x45, 0xd0, 0x5f, 0x56, 0x60, 0x15, 0x6a, 0x1c, 0xef, 0x3b,
	0x1c, 0x89, 0xae, 0xe3, 0xbb, 0x71, 0xaf, 0xe4, 0x95, 0xf2, 0x46, 0xb4, 0xb3, 0x15, 0x6e, 0xa4,
	0xeb, 0x55, 0x98, 0xab, 0x5e, 0xcb, 0xf0, 0x66, 0x8a, 0x38, 0x2e, 0x97, 0xf1, 0x5a, 0x9d, 0xa5,
	0x8d, 0x77, 0x7c, 0x8a, 0xfe, 0x73, 0x26, 0xc6, 0x8a, 0x3a, 0xc2, 0x24, 0x76, 0xc2, 0xd4, 0x84,
	0x95, 0x8e, 0xf0, 0xb6, 0x09, 0x25, 0xa2, 0x6f, 0x9f, 0x30, 0x12, 0xe7, 0xf1, 0x19, 0x06, 0xac,
	0x9f, 0x67, 0x13, 0xfb, 0x6d, 0x7e, 0x2d, 0xc0, 0x7c, 0x47, 0x78, 0x1a, 0x83, 0xa5, 0xd9, 0xb0,
	0x59, 0x35, 0x2f, 0x1e, 0x6a, 0x66, 0xfa, 0x5e, 0x57, 0x1f, 0xcc, 0xa3, 0x4e, 0x7a, 0x92, 0xc1,
	0xd2, 0xec, 0xb6, 0x64, 0x09, 0x98, 0xa8, 0x33, 0x05, 0x3c, 0x7d, 0x09, 0x06, 0xf0, 0x5a, 0xd2,
	0x9b, 0xf7, 0x32, 0x78, 0x88, 0xc5, 0xd5, 0x8d, 0x39, 0xc4, 0xe9, 0xf4, 0x66, 0x0d, 0x94, 0x25,
	0xbd, 0x44, 0x9d, 0x29, 0xbd, 0x53, 0x0d, 0xa2, 0xbd, 0x07, 0x70, 0xf9, 0xec, 0xf6, 0x78, 0x98,
	0xc1, 0xdf, 0x99, 0x96, 0xd5, 0xc7, 0x7f, 0x6a, 0x19, 0x53, 0xb5, 0x5e, 0x8e, 0x7f, 0xe8, 0xb9,
	0xf1, 0x44, 0x07, 0x47, 0x13, 0x1d, 0x7c, 0x9f, 0xe8, 0xe0, 0xdd, 0x54, 0xcf, 0x1d, 0x4d, 0xf5,
	0xdc, 0xe7, 0xa9, 0x9e, 0x7b, 0xf1, 0x28, 0x3d, 0x64, 0xa2, 0x48, 0x6b, 0x14, 0xcb, 0x7d, 0xc6,
	0x77, 0x93, 0x05, 0x6b, 0x6f, 0xd3, 0x3a, 0xf8, 0xed, 0x15, 0x56, 0xf3, 0xa7, 0x57, 0x54, 0x6f,
	0xe5, 0xc6, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x30, 0xe5, 0xe0, 0xac, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// MintShare defines a method for minting share of LiquidFarm
	MintShare(ctx context.Context, in *MsgMintShare, opts ...grpc.CallOption) (*MsgMintShareResponse, error)
	// BurnShare defines a method for burning share of LiquidFarm
	BurnShare(ctx context.Context, in *MsgBurnShare, opts ...grpc.CallOption) (*MsgBurnShareResponse, error)
	// PlaceBid defines a method for placing a bid for a rewards auction
	PlaceBid(ctx context.Context, in *MsgPlaceBid, opts ...grpc.CallOption) (*MsgPlaceBidResponse, error)
	// RefundBid defines a method for refunding the bid that is not winning for the auction
	RefundBid(ctx context.Context, in *MsgRefundBid, opts ...grpc.CallOption) (*MsgRefundBidResponse, error)
	// FinishRewardsAuctions defines a method for finishing all rewards auctions.
	// This message is just for testing purpose and it shouldn't be enabled in production.
	FinishRewardsAuctions(ctx context.Context, in *MsgFinishRewardsAuctions, opts ...grpc.CallOption) (*MsgFinishRewardsAuctionsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) MintShare(ctx context.Context, in *MsgMintShare, opts ...grpc.CallOption) (*MsgMintShareResponse, error) {
	out := new(MsgMintShareResponse)
	err := c.cc.Invoke(ctx, "/crescent.liquidfarming.v1beta1.Msg/MintShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BurnShare(ctx context.Context, in *MsgBurnShare, opts ...grpc.CallOption) (*MsgBurnShareResponse, error) {
	out := new(MsgBurnShareResponse)
	err := c.cc.Invoke(ctx, "/crescent.liquidfarming.v1beta1.Msg/BurnShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PlaceBid(ctx context.Context, in *MsgPlaceBid, opts ...grpc.CallOption) (*MsgPlaceBidResponse, error) {
	out := new(MsgPlaceBidResponse)
	err := c.cc.Invoke(ctx, "/crescent.liquidfarming.v1beta1.Msg/PlaceBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RefundBid(ctx context.Context, in *MsgRefundBid, opts ...grpc.CallOption) (*MsgRefundBidResponse, error) {
	out := new(MsgRefundBidResponse)
	err := c.cc.Invoke(ctx, "/crescent.liquidfarming.v1beta1.Msg/RefundBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FinishRewardsAuctions(ctx context.Context, in *MsgFinishRewardsAuctions, opts ...grpc.CallOption) (*MsgFinishRewardsAuctionsResponse, error) {
	out := new(MsgFinishRewardsAuctionsResponse)
	err := c.cc.Invoke(ctx, "/crescent.liquidfarming.v1beta1.Msg/FinishRewardsAuctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// MintShare defines a method for minting share of LiquidFarm
	MintShare(context.Context, *MsgMintShare) (*MsgMintShareResponse, error)
	// BurnShare defines a method for burning share of LiquidFarm
	BurnShare(context.Context, *MsgBurnShare) (*MsgBurnShareResponse, error)
	// PlaceBid defines a method for placing a bid for a rewards auction
	PlaceBid(context.Context, *MsgPlaceBid) (*MsgPlaceBidResponse, error)
	// RefundBid defines a method for refunding the bid that is not winning for the auction
	RefundBid(context.Context, *MsgRefundBid) (*MsgRefundBidResponse, error)
	// FinishRewardsAuctions defines a method for finishing all rewards auctions.
	// This message is just for testing purpose and it shouldn't be enabled in production.
	FinishRewardsAuctions(context.Context, *MsgFinishRewardsAuctions) (*MsgFinishRewardsAuctionsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) MintShare(ctx context.Context, req *MsgMintShare) (*MsgMintShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintShare not implemented")
}
func (*UnimplementedMsgServer) BurnShare(ctx context.Context, req *MsgBurnShare) (*MsgBurnShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnShare not implemented")
}
func (*UnimplementedMsgServer) PlaceBid(ctx context.Context, req *MsgPlaceBid) (*MsgPlaceBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceBid not implemented")
}
func (*UnimplementedMsgServer) RefundBid(ctx context.Context, req *MsgRefundBid) (*MsgRefundBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundBid not implemented")
}
func (*UnimplementedMsgServer) FinishRewardsAuctions(ctx context.Context, req *MsgFinishRewardsAuctions) (*MsgFinishRewardsAuctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishRewardsAuctions not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_MintShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.liquidfarming.v1beta1.Msg/MintShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintShare(ctx, req.(*MsgMintShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BurnShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BurnShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.liquidfarming.v1beta1.Msg/BurnShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BurnShare(ctx, req.(*MsgBurnShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PlaceBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlaceBid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PlaceBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.liquidfarming.v1beta1.Msg/PlaceBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PlaceBid(ctx, req.(*MsgPlaceBid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RefundBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRefundBid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RefundBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.liquidfarming.v1beta1.Msg/RefundBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RefundBid(ctx, req.(*MsgRefundBid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FinishRewardsAuctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFinishRewardsAuctions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FinishRewardsAuctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crescent.liquidfarming.v1beta1.Msg/FinishRewardsAuctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FinishRewardsAuctions(ctx, req.(*MsgFinishRewardsAuctions))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crescent.liquidfarming.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MintShare",
			Handler:    _Msg_MintShare_Handler,
		},
		{
			MethodName: "BurnShare",
			Handler:    _Msg_BurnShare_Handler,
		},
		{
			MethodName: "PlaceBid",
			Handler:    _Msg_PlaceBid_Handler,
		},
		{
			MethodName: "RefundBid",
			Handler:    _Msg_RefundBid_Handler,
		},
		{
			MethodName: "FinishRewardsAuctions",
			Handler:    _Msg_FinishRewardsAuctions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crescent/liquidfarming/v1beta1/tx.proto",
}

func (m *MsgMintShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DesiredAmount) > 0 {
		for iNdEx := len(m.DesiredAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DesiredAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LiquidFarmId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LiquidFarmId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.Liquidity.Size()
		i -= size
		if _, err := m.Liquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PositionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Share.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.LiquidFarmId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LiquidFarmId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgPlaceBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Share.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.RewardsAuctionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RewardsAuctionId))
		i--
		dAtA[i] = 0x18
	}
	if m.LiquidFarmId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LiquidFarmId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPlaceBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRefundBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRefundBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRefundBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardsAuctionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RewardsAuctionId))
		i--
		dAtA[i] = 0x18
	}
	if m.LiquidFarmId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LiquidFarmId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRefundBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRefundBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRefundBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFinishRewardsAuctions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinishRewardsAuctions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinishRewardsAuctions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFinishRewardsAuctionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinishRewardsAuctionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinishRewardsAuctionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMintShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.LiquidFarmId != 0 {
		n += 1 + sovTx(uint64(m.LiquidFarmId))
	}
	if len(m.DesiredAmount) > 0 {
		for _, e := range m.DesiredAmount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgMintShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != 0 {
		n += 1 + sovTx(uint64(m.PositionId))
	}
	l = m.Liquidity.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgBurnShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.LiquidFarmId != 0 {
		n += 1 + sovTx(uint64(m.LiquidFarmId))
	}
	l = m.Share.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBurnShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgPlaceBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.LiquidFarmId != 0 {
		n += 1 + sovTx(uint64(m.LiquidFarmId))
	}
	if m.RewardsAuctionId != 0 {
		n += 1 + sovTx(uint64(m.RewardsAuctionId))
	}
	l = m.Share.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPlaceBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRefundBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.LiquidFarmId != 0 {
		n += 1 + sovTx(uint64(m.LiquidFarmId))
	}
	if m.RewardsAuctionId != 0 {
		n += 1 + sovTx(uint64(m.RewardsAuctionId))
	}
	return n
}

func (m *MsgRefundBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFinishRewardsAuctions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFinishRewardsAuctionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMintShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidFarmId", wireType)
			}
			m.LiquidFarmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidFarmId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DesiredAmount = append(m.DesiredAmount, types.Coin{})
			if err := m.DesiredAmount[len(m.DesiredAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Liquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidFarmId", wireType)
			}
			m.LiquidFarmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidFarmId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidFarmId", wireType)
			}
			m.LiquidFarmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidFarmId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsAuctionId", wireType)
			}
			m.RewardsAuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardsAuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRefundBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRefundBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRefundBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidFarmId", wireType)
			}
			m.LiquidFarmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidFarmId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsAuctionId", wireType)
			}
			m.RewardsAuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardsAuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRefundBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRefundBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRefundBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinishRewardsAuctions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinishRewardsAuctions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinishRewardsAuctions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinishRewardsAuctionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinishRewardsAuctionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinishRewardsAuctionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
