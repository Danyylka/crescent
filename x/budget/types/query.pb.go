// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/budget/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AddressType enumerates the available types of a address.
type AddressType int32

const (
	// the 32 bytes length address type of ADR 028.
	AddressType32Bytes AddressType = 0
	// the default 20 bytes length address type.
	AddressType20Bytes AddressType = 1
)

var AddressType_name = map[int32]string{
	0: "ADDRESS_TYPE_32_BYTES",
	1: "ADDRESS_TYPE_20_BYTES",
}

var AddressType_value = map[string]int32{
	"ADDRESS_TYPE_32_BYTES": 0,
	"ADDRESS_TYPE_20_BYTES": 1,
}

func (x AddressType) String() string {
	return proto.EnumName(AddressType_name, int32(x))
}

func (AddressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_60151551cef977ce, []int{0}
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60151551cef977ce, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60151551cef977ce, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryBudgetsRequest is the request type for the Query/Budgets RPC method.
type QueryBudgetsRequest struct {
	Name               string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SourceAddress      string `protobuf:"bytes,2,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	DestinationAddress string `protobuf:"bytes,3,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
}

func (m *QueryBudgetsRequest) Reset()         { *m = QueryBudgetsRequest{} }
func (m *QueryBudgetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBudgetsRequest) ProtoMessage()    {}
func (*QueryBudgetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60151551cef977ce, []int{2}
}
func (m *QueryBudgetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBudgetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBudgetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBudgetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBudgetsRequest.Merge(m, src)
}
func (m *QueryBudgetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBudgetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBudgetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBudgetsRequest proto.InternalMessageInfo

func (m *QueryBudgetsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryBudgetsRequest) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *QueryBudgetsRequest) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

// QueryBudgetsResponse is the response type for the Query/Budgets RPC method.
type QueryBudgetsResponse struct {
	Budgets []BudgetResponse `protobuf:"bytes,1,rep,name=budgets,proto3" json:"budgets"`
}

func (m *QueryBudgetsResponse) Reset()         { *m = QueryBudgetsResponse{} }
func (m *QueryBudgetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBudgetsResponse) ProtoMessage()    {}
func (*QueryBudgetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60151551cef977ce, []int{3}
}
func (m *QueryBudgetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBudgetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBudgetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBudgetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBudgetsResponse.Merge(m, src)
}
func (m *QueryBudgetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBudgetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBudgetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBudgetsResponse proto.InternalMessageInfo

func (m *QueryBudgetsResponse) GetBudgets() []BudgetResponse {
	if m != nil {
		return m.Budgets
	}
	return nil
}

type BudgetResponse struct {
	Budget              Budget                                   `protobuf:"bytes,1,opt,name=budget,proto3" json:"budget"`
	TotalCollectedCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=total_collected_coins,json=totalCollectedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_collected_coins" yaml:"total_collected_coins"`
}

func (m *BudgetResponse) Reset()         { *m = BudgetResponse{} }
func (m *BudgetResponse) String() string { return proto.CompactTextString(m) }
func (*BudgetResponse) ProtoMessage()    {}
func (*BudgetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60151551cef977ce, []int{4}
}
func (m *BudgetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BudgetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BudgetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BudgetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BudgetResponse.Merge(m, src)
}
func (m *BudgetResponse) XXX_Size() int {
	return m.Size()
}
func (m *BudgetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BudgetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BudgetResponse proto.InternalMessageInfo

func (m *BudgetResponse) GetBudget() Budget {
	if m != nil {
		return m.Budget
	}
	return Budget{}
}

func (m *BudgetResponse) GetTotalCollectedCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalCollectedCoins
	}
	return nil
}

// QueryAddressesRequest is the request type for the Query/Addresses RPC method.
type QueryAddressesRequest struct {
	// The Address Type, default 0 for ADDRESS_TYPE_32_BYTES or 1 for ADDRESS_TYPE_20_BYTES
	Type AddressType `protobuf:"varint,1,opt,name=type,proto3,enum=cosmos.budget.v1beta1.AddressType" json:"type,omitempty"`
	// The module name to be used for address derivation, default is budget.
	ModuleName string `protobuf:"bytes,2,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	// The name to be used for address derivation.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryAddressesRequest) Reset()         { *m = QueryAddressesRequest{} }
func (m *QueryAddressesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAddressesRequest) ProtoMessage()    {}
func (*QueryAddressesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60151551cef977ce, []int{5}
}
func (m *QueryAddressesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressesRequest.Merge(m, src)
}
func (m *QueryAddressesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressesRequest proto.InternalMessageInfo

func (m *QueryAddressesRequest) GetType() AddressType {
	if m != nil {
		return m.Type
	}
	return AddressType32Bytes
}

func (m *QueryAddressesRequest) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *QueryAddressesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// QueryAddressesResponse is the response type for the Query/Addresses RPC method.
type QueryAddressesResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAddressesResponse) Reset()         { *m = QueryAddressesResponse{} }
func (m *QueryAddressesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAddressesResponse) ProtoMessage()    {}
func (*QueryAddressesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60151551cef977ce, []int{6}
}
func (m *QueryAddressesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressesResponse.Merge(m, src)
}
func (m *QueryAddressesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressesResponse proto.InternalMessageInfo

func (m *QueryAddressesResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterEnum("cosmos.budget.v1beta1.AddressType", AddressType_name, AddressType_value)
	proto.RegisterType((*QueryParamsRequest)(nil), "cosmos.budget.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "cosmos.budget.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryBudgetsRequest)(nil), "cosmos.budget.v1beta1.QueryBudgetsRequest")
	proto.RegisterType((*QueryBudgetsResponse)(nil), "cosmos.budget.v1beta1.QueryBudgetsResponse")
	proto.RegisterType((*BudgetResponse)(nil), "cosmos.budget.v1beta1.BudgetResponse")
	proto.RegisterType((*QueryAddressesRequest)(nil), "cosmos.budget.v1beta1.QueryAddressesRequest")
	proto.RegisterType((*QueryAddressesResponse)(nil), "cosmos.budget.v1beta1.QueryAddressesResponse")
}

func init() {
	proto.RegisterFile("tendermint/budget/v1beta1/query.proto", fileDescriptor_60151551cef977ce)
}

var fileDescriptor_60151551cef977ce = []byte{
	// 985 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0x3a, 0xf9, 0x26, 0xea, 0x58, 0xdf, 0xa8, 0x9a, 0x24, 0x55, 0xba, 0x6a, 0xd7, 0xab,
	0x91, 0x02, 0x69, 0x88, 0x3d, 0xce, 0x06, 0x72, 0x30, 0x27, 0xbb, 0x0d, 0x02, 0x0e, 0x28, 0x38,
	0xb9, 0x14, 0x54, 0xad, 0xc6, 0xbb, 0x53, 0x7b, 0x9b, 0xdd, 0x99, 0xed, 0xce, 0x38, 0xc1, 0xaa,
	0x8a, 0xa0, 0xe2, 0x80, 0x38, 0x41, 0x38, 0x22, 0xe0, 0x80, 0xc4, 0x01, 0x71, 0xe3, 0x5f, 0xe0,
	0xd0, 0x63, 0x25, 0x2e, 0x9c, 0x0a, 0x4a, 0xe0, 0x8c, 0xc4, 0x5f, 0x80, 0x76, 0x66, 0xd6, 0x75,
	0xe2, 0xba, 0x44, 0xe2, 0xb4, 0xb3, 0xef, 0x7d, 0x3e, 0xef, 0xc7, 0x67, 0xdf, 0x9b, 0x05, 0xab,
	0x92, 0xb2, 0x90, 0x66, 0x49, 0xc4, 0x24, 0xee, 0x0e, 0xc2, 0x1e, 0x95, 0xf8, 0x70, 0xb3, 0x4b,
	0x25, 0xd9, 0xc4, 0xf7, 0x07, 0x34, 0x1b, 0xd6, 0xd3, 0x8c, 0x4b, 0x0e, 0x97, 0x03, 0x2e, 0x12,
	0x2e, 0xea, 0x1a, 0x52, 0x37, 0x10, 0xfb, 0xa5, 0xe9, 0x6c, 0x83, 0x54, 0x74, 0x7b, 0xa9, 0xc7,
	0x7b, 0x5c, 0x1d, 0x71, 0x7e, 0x32, 0xd6, 0xab, 0x3d, 0xce, 0x7b, 0x31, 0xc5, 0xea, 0xad, 0x3b,
	0xb8, 0x8b, 0x09, 0x33, 0xf9, 0xec, 0x6b, 0xc6, 0x45, 0xd2, 0x08, 0x13, 0xc6, 0xb8, 0x24, 0x32,
	0xe2, 0x4c, 0x18, 0xaf, 0xa3, 0xab, 0xc1, 0x5d, 0x22, 0xe8, 0x28, 0x61, 0xc0, 0x23, 0x66, 0xfc,
	0xeb, 0xe3, 0x7e, 0xd5, 0xc6, 0x08, 0x95, 0x92, 0x5e, 0xc4, 0x54, 0xb0, 0xa2, 0x08, 0x8d, 0xf5,
	0x75, 0x75, 0xa6, 0x4d, 0xed, 0xd2, 0x8f, 0xa0, 0xd6, 0xa3, 0xac, 0xc6, 0x53, 0xca, 0x48, 0x1a,
	0x1d, 0x7a, 0x98, 0xa7, 0xaa, 0x94, 0xc9, 0xb2, 0xd0, 0x12, 0x80, 0xef, 0xe6, 0xc9, 0x76, 0x49,
	0x46, 0x12, 0xd1, 0xa1, 0xf7, 0x07, 0x54, 0x48, 0xd4, 0x01, 0x8b, 0x67, 0xac, 0x22, 0xe5, 0x4c,
	0x50, 0xf8, 0x3a, 0x98, 0x4b, 0x95, 0x65, 0xc5, 0x72, 0xad, 0xb5, 0x8a, 0x77, 0xbd, 0xfe, 0x5c,
	0x89, 0xeb, 0x9a, 0xd6, 0x9e, 0x7d, 0xfc, 0xb4, 0x5a, 0xea, 0x18, 0x0a, 0xfa, 0xd8, 0x32, 0x41,
	0xdb, 0x0a, 0x5c, 0xe4, 0x82, 0x10, 0xcc, 0x32, 0x92, 0x50, 0x15, 0xf2, 0x52, 0x47, 0x9d, 0xe1,
	0x2a, 0x58, 0x10, 0x7c, 0x90, 0x05, 0xd4, 0x27, 0x61, 0x98, 0x51, 0x21, 0x56, 0xca, 0xca, 0xfb,
	0x7f, 0x6d, 0x6d, 0x69, 0x23, 0xc4, 0x60, 0x31, 0xa4, 0x42, 0x1a, 0x71, 0x46, 0xd8, 0x19, 0x85,
	0x85, 0x63, 0x2e, 0x43, 0x40, 0x77, 0xc0, 0xd2, 0xd9, 0x12, 0x4c, 0x63, 0x3b, 0x60, 0x5e, 0xb7,
	0x90, 0x77, 0x36, 0xb3, 0x56, 0xf1, 0x56, 0xa7, 0x74, 0xa6, 0x89, 0x05, 0xcf, 0x74, 0x58, 0x70,
	0xd1, 0x5f, 0x16, 0x58, 0x38, 0x8b, 0xc8, 0x25, 0xd3, 0xde, 0x7f, 0x91, 0x4c, 0xd3, 0x0a, 0xc9,
	0xb4, 0x13, 0x7e, 0x6b, 0x81, 0x65, 0xc9, 0x25, 0x89, 0xfd, 0x80, 0xc7, 0x31, 0x0d, 0x24, 0x0d,
	0xfd, 0x7c, 0x64, 0x72, 0x39, 0xf2, 0x2a, 0xaf, 0x8e, 0x82, 0x11, 0x41, 0x47, 0xa1, 0x6e, 0xf2,
	0x88, 0xb5, 0x77, 0xf3, 0x40, 0x7f, 0x3f, 0xad, 0x5e, 0x1b, 0x92, 0x24, 0x6e, 0xa2, 0xe7, 0x46,
	0x41, 0x3f, 0xfc, 0x56, 0x5d, 0xeb, 0x45, 0xb2, 0x3f, 0xe8, 0xd6, 0x03, 0x9e, 0x98, 0x41, 0x32,
	0x8f, 0x9a, 0x08, 0x0f, 0xb0, 0x1c, 0xa6, 0x54, 0xa8, 0x80, 0xa2, 0xb3, 0xa8, 0x62, 0xdc, 0x2c,
	0x42, 0x28, 0x23, 0xfa, 0xc4, 0x02, 0xcb, 0x4a, 0x51, 0xa3, 0x30, 0x1d, 0x7d, 0xd6, 0x6d, 0x30,
	0x9b, 0xb3, 0x55, 0xdb, 0x0b, 0x1e, 0x9a, 0xd2, 0xb6, 0xa1, 0xed, 0x0f, 0x53, 0xda, 0x51, 0x78,
	0x58, 0x05, 0x95, 0x84, 0x87, 0x83, 0x98, 0xfa, 0x6a, 0x2a, 0xf4, 0x77, 0x07, 0xda, 0xf4, 0x4e,
	0x3e, 0x1b, 0xc5, 0xbc, 0xcc, 0x3c, 0x9b, 0x17, 0xe4, 0x81, 0x2b, 0xe7, 0xab, 0x30, 0xfa, 0xaf,
	0x80, 0xf9, 0x62, 0x2c, 0xf4, 0x80, 0x15, 0xaf, 0xeb, 0x43, 0x50, 0x19, 0xcb, 0x0e, 0x37, 0xc1,
	0x72, 0xeb, 0xd6, 0xad, 0xce, 0xce, 0xde, 0x9e, 0xbf, 0x7f, 0x7b, 0x77, 0xc7, 0xdf, 0xf2, 0xfc,
	0xf6, 0xed, 0xfd, 0x9d, 0xbd, 0xcb, 0x25, 0xfb, 0xca, 0x67, 0x5f, 0xbb, 0x70, 0x0c, 0xbb, 0xe5,
	0xb5, 0x87, 0x92, 0x8a, 0x09, 0x8a, 0xd7, 0x30, 0x14, 0x6b, 0x82, 0xe2, 0x35, 0x14, 0xc5, 0x9e,
	0xfd, 0xf4, 0x3b, 0xa7, 0xe4, 0xfd, 0x39, 0x07, 0xfe, 0xa7, 0xea, 0x85, 0xdf, 0x97, 0xc1, 0x9c,
	0xde, 0x16, 0x78, 0x63, 0x8a, 0x44, 0x93, 0xeb, 0x69, 0xaf, 0x5f, 0x04, 0xaa, 0x05, 0x40, 0x3f,
	0x5b, 0xc7, 0xad, 0xaf, 0x2c, 0x7b, 0xa3, 0x43, 0xe5, 0x20, 0x63, 0xc2, 0x25, 0x71, 0xec, 0xaa,
	0x8d, 0xa4, 0x92, 0x66, 0xc2, 0xe5, 0x77, 0x5d, 0xd9, 0xa7, 0xae, 0x0e, 0xe4, 0x6a, 0x99, 0xeb,
	0xe8, 0x00, 0x38, 0x6f, 0x44, 0x2c, 0x74, 0xf9, 0x20, 0xb7, 0x65, 0xd4, 0x25, 0xdd, 0xfc, 0x98,
	0x23, 0xf5, 0x36, 0xc3, 0xb7, 0xfa, 0x52, 0xa6, 0xa2, 0x89, 0xf1, 0xd8, 0xfc, 0x4c, 0x5e, 0xac,
	0xdd, 0x98, 0x77, 0x71, 0x42, 0x22, 0x86, 0x3f, 0x28, 0x4c, 0x22, 0xa5, 0x01, 0x6e, 0x6c, 0xfb,
	0x3a, 0x4e, 0x3d, 0x09, 0x1f, 0xfd, 0xf2, 0xc7, 0x97, 0xe5, 0x2a, 0xbc, 0x5e, 0x8c, 0xdf, 0xb9,
	0x3b, 0xd9, 0xe4, 0xfb, 0xa2, 0x0c, 0xe6, 0xcd, 0xd6, 0xc2, 0x17, 0xb6, 0x7f, 0xf6, 0x76, 0xb1,
	0x5f, 0xb9, 0x10, 0xd6, 0x68, 0xf5, 0xa3, 0x75, 0xdc, 0x7a, 0x64, 0xd9, 0x4b, 0xe3, 0x5a, 0x99,
	0xdd, 0xae, 0xa3, 0x7b, 0xd3, 0x35, 0x31, 0xeb, 0xfa, 0xe6, 0x7f, 0xd3, 0xc4, 0xf3, 0x85, 0x24,
	0x92, 0x16, 0x92, 0xb8, 0xd0, 0x99, 0x22, 0x89, 0x29, 0x09, 0x7e, 0x53, 0x06, 0x97, 0x46, 0x13,
	0x0f, 0x37, 0x5e, 0xd4, 0xe9, 0xf9, 0xf5, 0xb4, 0x6b, 0x17, 0x44, 0x1b, 0x65, 0x7e, 0xb2, 0x8e,
	0x5b, 0x1f, 0x59, 0x6f, 0x7f, 0x08, 0x66, 0x5e, 0x6d, 0x34, 0xe0, 0x11, 0xa8, 0xb4, 0x49, 0xe8,
	0x16, 0x7f, 0x8b, 0x3e, 0xb8, 0x4c, 0xd2, 0x34, 0x8e, 0x02, 0x75, 0xd7, 0xe2, 0x7b, 0x82, 0x33,
	0xb8, 0xff, 0x00, 0x05, 0x3c, 0xa4, 0xa8, 0xb9, 0xb5, 0x81, 0x12, 0x2a, 0x04, 0xe9, 0x51, 0xd4,
	0x44, 0x11, 0x3b, 0x24, 0x71, 0x14, 0xba, 0xf9, 0xd2, 0x0a, 0xf7, 0x28, 0x92, 0x7d, 0xd7, 0xac,
	0xa3, 0x9b, 0x2f, 0x7f, 0xd3, 0x2d, 0x00, 0x99, 0x09, 0xbd, 0x81, 0x42, 0x2a, 0x49, 0x14, 0x0b,
	0xd4, 0x7c, 0xff, 0xce, 0x43, 0xa5, 0xcb, 0x0d, 0xf8, 0xf2, 0x14, 0x5d, 0x48, 0x51, 0x36, 0x7e,
	0x90, 0x27, 0x78, 0xd8, 0xde, 0x7d, 0x7c, 0xe2, 0x58, 0x4f, 0x4e, 0x1c, 0xeb, 0xf7, 0x13, 0xc7,
	0xfa, 0xfc, 0xd4, 0x29, 0x3d, 0x39, 0x75, 0x4a, 0xbf, 0x9e, 0x3a, 0xa5, 0xf7, 0xb6, 0xc7, 0xaf,
	0xbd, 0x8c, 0x8a, 0x80, 0x32, 0x59, 0x63, 0x54, 0x1e, 0xf1, 0xec, 0x60, 0x64, 0xc0, 0x87, 0xaf,
	0x3d, 0xfb, 0x46, 0xea, 0x2a, 0xec, 0xce, 0xa9, 0xbf, 0xe6, 0xd6, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x71, 0xd0, 0x97, 0x55, 0x83, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns parameters of the budget module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Budgets returns all budgets.
	Budgets(ctx context.Context, in *QueryBudgetsRequest, opts ...grpc.CallOption) (*QueryBudgetsResponse, error)
	// Addresses returns an address that can be used as source and destination is derived according to the given type,
	// module name, and name.
	Addresses(ctx context.Context, in *QueryAddressesRequest, opts ...grpc.CallOption) (*QueryAddressesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/cosmos.budget.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Budgets(ctx context.Context, in *QueryBudgetsRequest, opts ...grpc.CallOption) (*QueryBudgetsResponse, error) {
	out := new(QueryBudgetsResponse)
	err := c.cc.Invoke(ctx, "/cosmos.budget.v1beta1.Query/Budgets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Addresses(ctx context.Context, in *QueryAddressesRequest, opts ...grpc.CallOption) (*QueryAddressesResponse, error) {
	out := new(QueryAddressesResponse)
	err := c.cc.Invoke(ctx, "/cosmos.budget.v1beta1.Query/Addresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params returns parameters of the budget module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Budgets returns all budgets.
	Budgets(context.Context, *QueryBudgetsRequest) (*QueryBudgetsResponse, error)
	// Addresses returns an address that can be used as source and destination is derived according to the given type,
	// module name, and name.
	Addresses(context.Context, *QueryAddressesRequest) (*QueryAddressesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Budgets(ctx context.Context, req *QueryBudgetsRequest) (*QueryBudgetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Budgets not implemented")
}
func (*UnimplementedQueryServer) Addresses(ctx context.Context, req *QueryAddressesRequest) (*QueryAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Addresses not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.budget.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Budgets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBudgetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Budgets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.budget.v1beta1.Query/Budgets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Budgets(ctx, req.(*QueryBudgetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Addresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Addresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.budget.v1beta1.Query/Addresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Addresses(ctx, req.(*QueryAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.budget.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Budgets",
			Handler:    _Query_Budgets_Handler,
		},
		{
			MethodName: "Addresses",
			Handler:    _Query_Addresses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tendermint/budget/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBudgetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBudgetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBudgetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationAddress) > 0 {
		i -= len(m.DestinationAddress)
		copy(dAtA[i:], m.DestinationAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DestinationAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceAddress) > 0 {
		i -= len(m.SourceAddress)
		copy(dAtA[i:], m.SourceAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBudgetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBudgetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBudgetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Budgets) > 0 {
		for iNdEx := len(m.Budgets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Budgets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BudgetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BudgetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BudgetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalCollectedCoins) > 0 {
		for iNdEx := len(m.TotalCollectedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalCollectedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Budget.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAddressesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBudgetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SourceAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DestinationAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBudgetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Budgets) > 0 {
		for _, e := range m.Budgets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *BudgetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Budget.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.TotalCollectedCoins) > 0 {
		for _, e := range m.TotalCollectedCoins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAddressesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovQuery(uint64(m.Type))
	}
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBudgetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBudgetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBudgetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBudgetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBudgetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBudgetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Budgets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Budgets = append(m.Budgets, BudgetResponse{})
			if err := m.Budgets[len(m.Budgets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BudgetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BudgetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BudgetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Budget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Budget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCollectedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalCollectedCoins = append(m.TotalCollectedCoins, types.Coin{})
			if err := m.TotalCollectedCoins[len(m.TotalCollectedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AddressType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
