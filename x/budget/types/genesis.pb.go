// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/budget/v1beta1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the budget module's genesis state.
type GenesisState struct {
	// params defines all the parameters for the budget module
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// budget_records defines the budget records used for genesis state
	BudgetRecords []BudgetRecord `protobuf:"bytes,2,rep,name=budget_records,json=budgetRecords,proto3" json:"budget_records" yaml:"budget_records"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e2aad40895529b5, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

// BudgetRecord records the state of each budget after genesis import or export.
type BudgetRecord struct {
	// name defines the name of the budget
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	// total_collected_coins specifies the total collected coins in a budget ever since the budget is created
	TotalCollectedCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=total_collected_coins,json=totalCollectedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_collected_coins" yaml:"total_collected_coins"`
}

func (m *BudgetRecord) Reset()         { *m = BudgetRecord{} }
func (m *BudgetRecord) String() string { return proto.CompactTextString(m) }
func (*BudgetRecord) ProtoMessage()    {}
func (*BudgetRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e2aad40895529b5, []int{1}
}
func (m *BudgetRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BudgetRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BudgetRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BudgetRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BudgetRecord.Merge(m, src)
}
func (m *BudgetRecord) XXX_Size() int {
	return m.Size()
}
func (m *BudgetRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_BudgetRecord.DiscardUnknown(m)
}

var xxx_messageInfo_BudgetRecord proto.InternalMessageInfo

func (m *BudgetRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BudgetRecord) GetTotalCollectedCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalCollectedCoins
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "cosmos.budget.v1beta1.GenesisState")
	proto.RegisterType((*BudgetRecord)(nil), "cosmos.budget.v1beta1.BudgetRecord")
}

func init() {
	proto.RegisterFile("tendermint/budget/v1beta1/genesis.proto", fileDescriptor_1e2aad40895529b5)
}

var fileDescriptor_1e2aad40895529b5 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x31, 0x6f, 0xd4, 0x30,
	0x14, 0xc7, 0x63, 0xa8, 0x2a, 0xc8, 0x15, 0x90, 0x02, 0x27, 0xb5, 0x15, 0x75, 0xaa, 0x54, 0xc0,
	0x2d, 0x8d, 0xd5, 0x22, 0x18, 0xca, 0x96, 0x0e, 0xac, 0x55, 0x60, 0x62, 0x39, 0x39, 0xc9, 0x23,
	0x44, 0x8d, 0xed, 0xc3, 0x7e, 0x57, 0xb8, 0x6f, 0xc0, 0xc8, 0x37, 0xa0, 0x23, 0xe2, 0x53, 0x30,
	0x76, 0xec, 0x82, 0xc4, 0x74, 0xa0, 0xbb, 0x85, 0xb9, 0x9f, 0x00, 0x9d, 0x9d, 0x44, 0x07, 0xea,
	0x4d, 0x71, 0x9e, 0x7f, 0xfe, 0xbd, 0xff, 0x8b, 0xe3, 0x3f, 0x41, 0x90, 0x05, 0x68, 0x51, 0x49,
	0x64, 0xd9, 0xb8, 0x28, 0x01, 0xd9, 0xd9, 0x41, 0x06, 0xc8, 0x0f, 0x58, 0x09, 0x12, 0x4c, 0x65,
	0xe2, 0x91, 0x56, 0xa8, 0x82, 0x7e, 0xae, 0x8c, 0x50, 0x26, 0x76, 0x50, 0xdc, 0x40, 0xdb, 0x5b,
	0xa5, 0x52, 0x65, 0x0d, 0xcc, 0x42, 0xd9, 0xf8, 0x2d, 0xe3, 0x72, 0xe2, 0x4e, 0x6c, 0x3f, 0x28,
	0x55, 0xa9, 0xec, 0x92, 0x2d, 0x56, 0x4d, 0xf5, 0xf1, 0xea, 0x86, 0x8d, 0xda, 0x71, 0x8f, 0x56,
	0x73, 0xef, 0xc7, 0xa0, 0xdb, 0x26, 0xe1, 0xff, 0xfd, 0xb1, 0x12, 0x60, 0x90, 0x8b, 0x51, 0x03,
	0x50, 0x97, 0x9b, 0x65, 0xdc, 0x40, 0x67, 0xc8, 0x55, 0x25, 0xdd, 0x7e, 0xf4, 0x9d, 0xf8, 0x1b,
	0x2f, 0xdd, 0xa4, 0xaf, 0x90, 0x23, 0x04, 0x2f, 0xfc, 0xf5, 0x11, 0xd7, 0x5c, 0x98, 0x4d, 0xb2,
	0x4b, 0x06, 0xbd, 0xc3, 0x9d, 0xf8, 0xda, 0xc9, 0xe3, 0x13, 0x0b, 0x25, 0x6b, 0x17, 0xd3, 0xd0,
	0x4b, 0x9b, 0x23, 0x41, 0xe5, 0xdf, 0x75, 0xd8, 0x50, 0x43, 0xae, 0x74, 0x61, 0x36, 0x6f, 0xec,
	0xde, 0x1c, 0xf4, 0x0e, 0xf7, 0x56, 0x48, 0x12, 0xfb, 0x9a, 0x5a, 0x36, 0xd9, 0x59, 0xa8, 0xae,
	0xa6, 0x61, 0x7f, 0xc2, 0x45, 0x7d, 0x14, 0xfd, 0x2b, 0x8a, 0xd2, 0x3b, 0xd9, 0x12, 0x6c, 0x8e,
	0x6e, 0x7d, 0x3a, 0x0f, 0xbd, 0x3f, 0xe7, 0xa1, 0x17, 0xfd, 0x20, 0xfe, 0xc6, 0xb2, 0x28, 0xd8,
	0xf3, 0xd7, 0x24, 0x17, 0x60, 0x07, 0xb8, 0x9d, 0xdc, 0xbb, 0x9a, 0x86, 0x3d, 0xa7, 0x5c, 0x54,
	0xa3, 0xd4, 0x6e, 0x06, 0x5f, 0x88, 0xdf, 0x47, 0x85, 0xbc, 0x1e, 0xe6, 0xaa, 0xae, 0x21, 0x47,
	0x28, 0x86, 0x8b, 0xef, 0xd2, 0x46, 0xde, 0xea, 0x22, 0x73, 0x03, 0x5d, 0xe0, 0x63, 0x55, 0xc9,
	0xe4, 0xa4, 0x09, 0xfa, 0xd0, 0x59, 0xaf, 0xb5, 0x44, 0xdf, 0x7e, 0x85, 0x83, 0xb2, 0xc2, 0x77,
	0xe3, 0x2c, 0xce, 0x95, 0x60, 0xcd, 0x35, 0xb8, 0xc7, 0xbe, 0x29, 0x4e, 0x19, 0x4e, 0x46, 0x60,
	0xac, 0xd0, 0xa4, 0xf7, 0xad, 0xe3, 0xb8, 0x55, 0xd8, 0x62, 0xf2, 0xfa, 0xeb, 0x8c, 0x92, 0x8b,
	0x19, 0x25, 0x97, 0x33, 0x4a, 0x7e, 0xcf, 0x28, 0xf9, 0x3c, 0xa7, 0xde, 0xe5, 0x9c, 0x7a, 0x3f,
	0xe7, 0xd4, 0x7b, 0xf3, 0x7c, 0x59, 0xae, 0xc1, 0xe4, 0x20, 0x71, 0x5f, 0x02, 0x7e, 0x50, 0xfa,
	0xb4, 0x2b, 0xb0, 0xb3, 0x67, 0xec, 0x63, 0xfb, 0xff, 0xd8, 0x86, 0xd9, 0xba, 0xbd, 0xf7, 0xa7,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x2e, 0x71, 0x28, 0xfa, 0x02, 0x00, 0x00,
}

func (this *BudgetRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BudgetRecord)
	if !ok {
		that2, ok := that.(BudgetRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.TotalCollectedCoins) != len(that1.TotalCollectedCoins) {
		return false
	}
	for i := range this.TotalCollectedCoins {
		if !this.TotalCollectedCoins[i].Equal(&that1.TotalCollectedCoins[i]) {
			return false
		}
	}
	return true
}
func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BudgetRecords) > 0 {
		for iNdEx := len(m.BudgetRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BudgetRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BudgetRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BudgetRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BudgetRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalCollectedCoins) > 0 {
		for iNdEx := len(m.TotalCollectedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalCollectedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.BudgetRecords) > 0 {
		for _, e := range m.BudgetRecords {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *BudgetRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.TotalCollectedCoins) > 0 {
		for _, e := range m.TotalCollectedCoins {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BudgetRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BudgetRecords = append(m.BudgetRecords, BudgetRecord{})
			if err := m.BudgetRecords[len(m.BudgetRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BudgetRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BudgetRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BudgetRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCollectedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalCollectedCoins = append(m.TotalCollectedCoins, types.Coin{})
			if err := m.TotalCollectedCoins[len(m.TotalCollectedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
