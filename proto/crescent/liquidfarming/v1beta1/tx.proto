syntax = "proto3";

package crescent.liquidfarming.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package                      = "github.com/crescent-network/crescent/v5/x/liquidfarming/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the Msg service.
service Msg {
  // MintShare defines a method for minting share of LiquidFarm
  rpc MintShare(MsgMintShare) returns (MsgMintShareResponse);

  // BurnShare defines a method for burning share of LiquidFarm
  rpc BurnShare(MsgBurnShare) returns (MsgBurnShareResponse);

  // PlaceBid defines a method for placing a bid for a rewards auction
  rpc PlaceBid(MsgPlaceBid) returns (MsgPlaceBidResponse);

  // CancelBid defines a method for cancelling the bid that is not winning for the auction
  rpc CancelBid(MsgCancelBid) returns (MsgCancelBidResponse);
}

// MsgMintShare defines a SDK message for minting share of LiquidFarm.
message MsgMintShare {
  string   sender                                  = 1;
  uint64   liquid_farm_id                          = 2;
  repeated cosmos.base.v1beta1.Coin desired_amount = 3
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
}

message MsgMintShareResponse {
  cosmos.base.v1beta1.Coin minted_share = 1 [(gogoproto.nullable) = false];
  uint64                   position_id  = 2;
  string                   liquidity    = 3
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin amount = 4
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
}

// MsgBurnShare defines a SDK message for burning share of LiquidFarm.
message MsgBurnShare {
  string                   sender         = 1;
  uint64                   liquid_farm_id = 2;
  cosmos.base.v1beta1.Coin share          = 3 [(gogoproto.nullable) = false];
}

message MsgBurnShareResponse {
  string removed_liquidity = 1
      [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin amount = 2
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
}

// MsgPlaceBid defines a SDK message for placing a bid for a rewards auction.
message MsgPlaceBid {
  string                   sender             = 1;
  uint64                   liquid_farm_id     = 2;
  uint64                   rewards_auction_id = 3;
  cosmos.base.v1beta1.Coin share              = 4 [(gogoproto.nullable) = false];
}

message MsgPlaceBidResponse {}

// MsgCancelBid defines a SDK message for cancelling the bid that is not winning for the auction.
message MsgCancelBid {
  string sender             = 1;
  uint64 liquid_farm_id     = 2;
  uint64 rewards_auction_id = 3;
}

message MsgCancelBidResponse {}
